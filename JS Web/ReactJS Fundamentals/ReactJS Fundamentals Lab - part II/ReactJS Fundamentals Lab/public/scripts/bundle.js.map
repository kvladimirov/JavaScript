{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/alt/lib/actions/index.js","node_modules/alt/lib/functions.js","node_modules/alt/lib/index.js","node_modules/alt/lib/store/AltStore.js","node_modules/alt/lib/store/StoreMixin.js","node_modules/alt/lib/store/index.js","node_modules/alt/lib/utils/AltUtils.js","node_modules/alt/lib/utils/StateFunctions.js","node_modules/deep-equal/index.js","node_modules/deep-equal/lib/is_arguments.js","node_modules/deep-equal/lib/keys.js","node_modules/flux/index.js","node_modules/flux/lib/Dispatcher.js","node_modules/flux/node_modules/fbjs/lib/invariant.js","node_modules/history/lib/Actions.js","node_modules/history/lib/AsyncUtils.js","node_modules/history/lib/DOMStateStorage.js","node_modules/history/lib/DOMUtils.js","node_modules/history/lib/ExecutionEnvironment.js","node_modules/history/lib/createBrowserHistory.js","node_modules/history/lib/createDOMHistory.js","node_modules/history/lib/createHistory.js","node_modules/history/lib/createLocation.js","node_modules/history/lib/deprecate.js","node_modules/history/lib/extractPath.js","node_modules/history/lib/parsePath.js","node_modules/history/lib/runTransitionHook.js","node_modules/invariant/browser.js","node_modules/is-promise/index.js","node_modules/process/browser.js","node_modules/transmitter/dist/transmitter.js","node_modules/warning/browser.js","source/client/actions/FooterActions.js","source/client/actions/HomeActions.js","source/client/actions/MovieAddActions.js","source/client/actions/NavbarActions.js","source/client/actions/UserActions.js","source/client/alt.js","source/client/components/App.js","source/client/components/Footer.js","source/client/components/Home.js","source/client/components/MovieAdd.js","source/client/components/Navbar.js","source/client/components/UserProfile.js","source/client/components/sub-components/MovieCard.js","source/client/components/sub-components/MovieCommentsPanel.js","source/client/components/sub-components/MovieVotePanel.js","source/client/components/sub-components/NavbarUserMenu.js","source/client/components/sub-components/UserInfo.js","source/client/components/sub-components/UserRatedMovies.js","source/client/components/sub-components/UserRatedMoviesPanel.js","source/client/components/sub-components/UserReviews.js","source/client/components/sub-components/UserReviewsPanel.js","source/client/main.js","source/client/routes.js","source/client/stores/FooterStore.js","source/client/stores/HomeStore.js","source/client/stores/MovieAddStore.js","source/client/stores/NavbarStore.js","source/client/stores/UserStore.js","source/client/utilities/Helpers.js","source/client/utilities/RequesterTMDB.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnxjnpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvptOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvlSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5DA;;;;;;;;IAEM,a;AACJ,2BAAe;AAAA;;AACb,SAAK,eAAL,CACE,4BADF;AAGD;;;;0CAEsB;AAAA;;AACrB,UAAI,UAAU;AACZ,gBAAQ,KADI;AAEZ,aAAK;AAFO,OAAd;;AAKA,QAAE,IAAF,CAAO,OAAP,EACG,IADH,CACQ;AAAA,eAAQ,MAAK,0BAAL,CAAgC,IAAhC,CAAR;AAAA,OADR;;AAGA,aAAO,IAAP;AACD;;;;;;kBAGY,cAAI,aAAJ,CAAkB,aAAlB,C;;;;;;;;;;;ACtBf;;;;AACA;;;;;;;;IAEM,W;AACJ,yBAAe;AAAA;;AACb,SAAK,eAAL,CACE,wBADF,EAEE,qBAFF;AAID;;;;sCAEkB;AAAA;;AACjB,UAAI,UAAU;AACZ,aAAK,qBADO;AAEZ,gBAAQ;AAFI,OAAd;;AAKA,QAAE,IAAF,CAAO,OAAP,EACG,IADH,CACQ,mBAAW;AACf,YAAI,eAAe,EAAnB;AADe;AAAA;AAAA;;AAAA;AAEf,+BAAkB,OAAlB,8HAA2B;AAAA,gBAAlB,KAAkB;;AACzB,yBAAa,IAAb,CAAkB,wBAAK,cAAL,CAAoB,MAAM,IAA1B,CAAlB;AACD;AAJc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKf,gBAAQ,GAAR,CAAY,YAAZ,EAA0B,IAA1B,CAA+B,UAAC,QAAD,EAAc;AAC3C,cAAI,SAAS,EAAb;AACA,eAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,MAA5B,EAAoC,GAApC,EAAyC;AACvC,gBAAI,YAAY;AACd,mBAAK,QAAQ,CAAR,EAAW,GADF;AAEd,oBAAM,QAAQ,CAAR,EAAW,IAFH;AAGd,2BAAa,QAAQ,CAAR,EAAW,WAHV;AAId,sBAAQ,QAAQ,CAAR,EAAW,MAJL;AAKd,8BAAgB,SAAS,CAAT,EAAY;AALd,aAAhB;AAOA,mBAAO,IAAP,CAAY,SAAZ;AACD;;AAED,gBAAK,sBAAL,CAA4B,MAA5B;AACD,SAdD;AAeD,OArBH,EAsBG,IAtBH,CAsBQ;AAAA,eAAO,MAAK,mBAAL,CAAyB,GAAzB,CAAP;AAAA,OAtBR;;AAwBA,aAAO,IAAP;AACD;;;;;;kBAGY,cAAI,aAAJ,CAAkB,WAAlB,C;;;;;;;;;;;AC7Cf;;;;;;;;IAEM,e;AACJ,6BAAe;AAAA;;AACb,SAAK,eAAL,CACE,kBADF,EAEE,yBAFF,EAGE,oBAHF,EAIE,oBAJF,EAKE,sBALF,EAME,iBANF,EAOE,cAPF;AASD;;;;6BAES,I,EAAM;AAAA;;AACd,UAAI,UAAU;AACZ,aAAK,iBADO;AAEZ,gBAAQ,MAFI;AAGZ,cAAM,KAAK,SAAL,CAAe,IAAf,CAHM;AAIZ,qBAAa;AAJD,OAAd;;AAOA,QAAE,IAAF,CAAO,OAAP,EACG,IADH,CACQ;AAAA,eAAM,MAAK,eAAL,EAAN;AAAA,OADR,EAEG,IAFH,CAEQ,UAAC,GAAD;AAAA,eAAS,MAAK,YAAL,CAAkB,GAAlB,CAAT;AAAA,OAFR;;AAIA,aAAO,IAAP;AACD;;;;;;kBAGY,cAAI,aAAJ,CAAkB,eAAlB,C;;;;;;;;;AC/Bf;;;;;;;;IAEM,a,GACJ,yBAAe;AAAA;;AACb,OAAK,eAAL,CACE,qBADF;AAGD,C;;kBAGY,cAAI,aAAJ,CAAkB,aAAlB,C;;;;;;;;;;;ACVf;;;;;;;;IAEM,W;AACJ,yBAAe;AAAA;;AACb,SAAK,eAAL,CACE,kBADF,EAEE,eAFF,EAGE,mBAHF;AAKD;;;;gCAEY;AAAA;;AACX,UAAI,UAAU;AACZ,aAAK,aADO;AAEZ,gBAAQ,MAFI;AAGZ,cAAM,KAAK,SAAL,CAAe,EAAC,UAAU,OAAX,EAAoB,UAAU,OAA9B,EAAf,CAHM;AAIZ,qBAAa;AAJD,OAAd;;AAOA,QAAE,IAAF,CAAO,OAAP,EACG,IADH,CACQ;AAAA,eAAQ,MAAK,gBAAL,CAAsB,IAAtB,CAAR;AAAA,OADR,EAEG,IAFH,CAEQ;AAAA,eAAO,MAAK,aAAL,CAAmB,GAAnB,CAAP;AAAA,OAFR;;AAIA,aAAO,IAAP;AACD;;;iCAEa;AAAA;;AACZ,UAAI,UAAU;AACZ,aAAK,cADO;AAEZ,gBAAQ;AAFI,OAAd;;AAKA,QAAE,IAAF,CAAO,OAAP,EACG,IADH,CACQ;AAAA,eAAM,OAAK,iBAAL,EAAN;AAAA,OADR;;AAGA,aAAO,IAAP;AACD;;;;;;kBAGY,cAAI,aAAJ,CAAkB,WAAlB,C;;;;;;;;;ACvCf;;;;;;kBAEe,mB;;;;;;;;;;;ACFf;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqB,G;;;AACnB,eAAa,KAAb,EAAoB;AAAA;;AAAA,0GACZ,KADY;;AAGlB,UAAK,KAAL,GAAa,oBAAU,QAAV,EAAb;;AAEA,UAAK,QAAL,GAAgB,MAAK,QAAL,CAAc,IAAd,OAAhB;AALkB;AAMnB;;;;6BAES,K,EAAO;AACf,WAAK,QAAL,CAAc,KAAd;AACD;;;wCAEoB;AACnB,0BAAU,MAAV,CAAiB,KAAK,QAAtB;AACA,4BAAY,SAAZ;AACD;;;2CAEuB;AACtB,0BAAU,MAAV,CAAiB,KAAK,QAAtB;AACD;;;6BAES;AACR,aACE;AAAA;AAAA;AACE,6DADF;AAEG,aAAK,KAAL,CAAW,QAFd;AAGE;AAHF,OADF;AAOD;;;;EA9B8B,gBAAM,S;;kBAAlB,G;;;;;;;;;;;ACNrB;;;;AACA;;AACA;;;;AACA;;;;;;;;;;;;IAEqB,M;;;AACnB,kBAAa,KAAb,EAAoB;AAAA;;AAAA,gHACZ,KADY;;AAElB,UAAK,KAAL,GAAa,sBAAY,QAAZ,EAAb;;AAEA,UAAK,QAAL,GAAgB,MAAK,QAAL,CAAc,IAAd,OAAhB;AAJkB;AAKnB;;;;6BAES,K,EAAO;AACf,WAAK,QAAL,CAAc,KAAd;AACD;;;wCAEoB;AACnB,4BAAY,MAAZ,CAAmB,KAAK,QAAxB;;AAEA,8BAAc,mBAAd;AACA,WAAK,QAAL,GAAgB,YAAY;AAAA,eAAM,wBAAc,mBAAd,EAAN;AAAA,OAAZ,EAAuD,KAAvD,CAAhB;AACD;;;2CAEuB;AACtB,4BAAY,QAAZ,CAAqB,KAAK,QAA1B;AACA,oBAAc,KAAK,QAAnB;AACD;;;6BAES;AACR,UAAI,mBAAmB,KAAK,KAAL,CAAW,gBAAX,CAA4B,GAA5B,CAAgC,iBAAS;AAC9D,eACE;AAAA;AAAA,YAAI,KAAK,MAAM,GAAf;AACE;AAAA;AAAA,cAAM,UAAN;AAAmB,kBAAM;AAAzB;AADF,SADF;AAKD,OANsB,CAAvB;;AAQA,aACE;AAAA;AAAA;AACE;AAAA;AAAA,YAAK,WAAU,WAAf;AACE;AAAA;AAAA,cAAK,WAAU,KAAf;AACE;AAAA;AAAA,gBAAK,WAAU,UAAf;AACE;AAAA;AAAA,kBAAI,WAAU,MAAd;AACE;AAAA;AAAA;AAAA;AAAA,iBADF;AAAA;AACmC;AAAA;AAAA;AAAA;AAAA;AADnC,eADF;AAIE;AAAA;AAAA;AAAA;AACY;AAAA;AAAA;AAAA;AAAA,iBADZ;AAAA;AACsC;AAAA;AAAA;AAAA;AAAA,iBADtC;AAAA;AACoE;AAAA;AAAA;AAAA;AAAA;AADpE,eAJF;AAOE;AAAA;AAAA;AAAA;AAAA;AAPF,aADF;AAUE;AAAA;AAAA,gBAAK,WAAU,oBAAf;AACE;AAAA;AAAA,kBAAI,WAAU,MAAd;AACE;AAAA;AAAA;AAAA;AAAA,iBADF;AAAA;AAAA,eADF;AAIE;AAAA;AAAA,kBAAI,WAAU,aAAd;AACG;AADH;AAJF,aAVF;AAkBE;AAAA;AAAA,gBAAK,WAAU,UAAf;AACE;AAAA;AAAA,kBAAI,WAAU,MAAd;AAAA;AAAA,eADF;AAEE;AAAA;AAAA,kBAAG,MAAK,gCAAR;AACE;AAAA;AAAA;AAAA;AAAA;AADF;AAFF;AAlBF;AADF;AADF,OADF;AA+BD;;;;EAhEiC,gBAAM,S;;kBAArB,M;;;;;;;;;;;ACLrB;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqB,I;;;AACnB,gBAAa,KAAb,EAAoB;AAAA;;AAAA,4GACZ,KADY;;AAElB,UAAK,KAAL,GAAa,oBAAU,QAAV,EAAb;;AAEA,UAAK,QAAL,GAAgB,MAAK,QAAL,CAAc,IAAd,OAAhB;AAJkB;AAKnB;;;;6BAES,K,EAAO;AACf,WAAK,QAAL,CAAc,KAAd;AACD;;;wCAEoB;AACnB,0BAAU,MAAV,CAAiB,KAAK,QAAtB;;AAEA,4BAAY,eAAZ;AACD;;;2CAEuB;AACtB,0BAAU,QAAV,CAAmB,KAAK,QAAxB;AACD;;;6BAES;AACR,UAAI,SAAS,KAAK,KAAL,CAAW,YAAX,CAAwB,GAAxB,CAA4B,UAAC,KAAD,EAAQ,KAAR,EAAkB;AACzD,eACE,qDAAW,KAAK,MAAM,GAAtB,EAA2B,OAAO,KAAlC,EAAyC,OAAO,KAAhD,GADF;AAGD,OAJY,CAAb;;AAMA,aACE;AAAA;AAAA,UAAK,WAAU,WAAf;AACE;AAAA;AAAA,YAAI,WAAU,aAAd;AAAA;AACE;AAAA;AAAA;AAAA;AAAA;AADF,SADF;AAIE;AAAA;AAAA,YAAK,WAAU,YAAf;AACG;AADH;AAJF,OADF;AAUD;;;;EAvC+B,gBAAM,S;;kBAAnB,I;;;;;;;;;;;ACLrB;;;;AAEA;;;;AACA;;;;;;;;;;;;IAEqB,Q;;;AACnB,oBAAa,KAAb,EAAoB;AAAA;;AAAA,oHACZ,KADY;;AAGlB,UAAK,KAAL,GAAa,wBAAc,QAAd,EAAb;;AAEA,UAAK,QAAL,GAAgB,MAAK,QAAL,CAAc,IAAd,OAAhB;AALkB;AAMnB;;;;6BAES,K,EAAO;AACf,WAAK,QAAL,CAAc,KAAd;AACD;;;wCAEoB;AACnB,8BAAc,MAAd,CAAqB,KAAK,QAA1B;AACD;;;2CAEuB;AACtB,8BAAc,QAAd,CAAuB,KAAK,QAA5B;AACD;;;iCAEa,C,EAAG;AACf,QAAE,cAAF;;AAEA,UAAI,OAAO,KAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB,EAAX;AACA,UAAI,SAAS,KAAK,KAAL,CAAW,MAAxB;AACA,UAAI,CAAC,IAAL,EAAW;AACT,kCAAgB,kBAAhB;AACD;AACD,UAAI,OAAO,MAAP,KAAkB,CAAtB,EAAyB;AACvB,kCAAgB,oBAAhB;AACD;;AAED,UAAI,IAAJ,EAAU;AACR,YAAI,OAAO;AACT,gBAAM,KAAK,KAAL,CAAW,IADR;AAET,uBAAa,KAAK,KAAL,CAAW,WAFf;AAGT,kBAAQ,KAAK,KAAL,CAAW;AAHV,SAAX;;AAMA,kCAAgB,QAAhB,CAAyB,IAAzB;AACD;AACF;;;6BAES;AACR,aACE;AAAA;AAAA,UAAK,WAAU,WAAf;AACE;AAAA;AAAA,YAAK,WAAU,sBAAf;AACE;AAAA;AAAA,cAAK,WAAU,UAAf;AACE;AAAA;AAAA,gBAAK,WAAU,qBAAf;AACE;AAAA;AAAA,kBAAK,WAAU,eAAf;AAAA;AAAA,eADF;AAEE;AAAA;AAAA,kBAAK,WAAU,YAAf;AACE;AAAA;AAAA,oBAAM,UAAU,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAAhB;AACE;AAAA;AAAA,sBAAK,WAAW,gBAAgB,KAAK,KAAL,CAAW,mBAA3C;AACE;AAAA;AAAA,wBAAO,WAAU,eAAjB;AAAA;AAAA,qBADF;AAEE,6DAAO,MAAK,MAAZ,EAAmB,WAAU,cAA7B,EAA4C,KAAI,eAAhD;AACE,6BAAO,KAAK,KAAL,CAAW,IADpB;AAEE,gCAAU,0BAAgB,gBAF5B,EAE8C,eAF9C,GAFF;AAKE;AAAA;AAAA,wBAAM,WAAU,YAAhB;AAA+B,2BAAK,KAAL,CAAW;AAA1C;AALF,mBADF;AAQE;AAAA;AAAA,sBAAK,WAAU,YAAf;AACE;AAAA;AAAA,wBAAO,WAAU,eAAjB;AAAA;AAAA,qBADF;AAEE,gEAAU,WAAU,cAApB;AACE,4BAAK,GADP;AAEE,6BAAO,KAAK,KAAL,CAAW,WAFpB;AAGE,gCAAU,0BAAgB,uBAH5B;AAFF,mBARF;AAeE;AAAA;AAAA,sBAAK,WAAW,gBAAgB,KAAK,KAAL,CAAW,qBAA3C;AACE;AAAA;AAAA,wBAAK,WAAU,0BAAf;AACE,+DAAO,MAAK,UAAZ,EAAuB,MAAK,QAA5B,EAAqC,IAAG,QAAxC,EAAiD,OAAM,QAAvD;AACE,iCAAS,KAAK,KAAL,CAAW,MAAX,CAAkB,OAAlB,CAA0B,QAA1B,MAAwC,CAAC,CADpD;AAEE,kCAAU,0BAAgB,kBAF5B,GADF;AAIE;AAAA;AAAA,0BAAO,SAAQ,QAAf;AAAA;AAAA;AAJF,qBADF;AAOE;AAAA;AAAA,wBAAK,WAAU,0BAAf;AACE,+DAAO,MAAK,UAAZ,EAAuB,MAAK,QAA5B,EAAqC,IAAG,QAAxC,EAAiD,OAAM,QAAvD;AACE,iCAAS,KAAK,KAAL,CAAW,MAAX,CAAkB,OAAlB,CAA0B,QAA1B,MAAwC,CAAC,CADpD;AAEE,kCAAU,0BAAgB,kBAF5B,GADF;AAIE;AAAA;AAAA,0BAAO,SAAQ,QAAf;AAAA;AAAA;AAJF,qBAPF;AAaE;AAAA;AAAA,wBAAK,WAAU,0BAAf;AACE,+DAAO,MAAK,UAAZ,EAAuB,MAAK,QAA5B,EAAqC,IAAG,QAAxC,EAAiD,OAAM,QAAvD;AACE,iCAAS,KAAK,KAAL,CAAW,MAAX,CAAkB,OAAlB,CAA0B,QAA1B,MAAwC,CAAC,CADpD;AAEE,kCAAU,0BAAgB,kBAF5B,GADF;AAIE;AAAA;AAAA,0BAAO,SAAQ,QAAf;AAAA;AAAA;AAJF,qBAbF;AAmBE;AAAA;AAAA,wBAAK,WAAU,0BAAf;AACE,+DAAO,MAAK,UAAZ,EAAuB,MAAK,QAA5B,EAAqC,IAAG,SAAxC,EAAkD,OAAM,SAAxD;AACE,iCAAS,KAAK,KAAL,CAAW,MAAX,CAAkB,OAAlB,CAA0B,SAA1B,MAAyC,CAAC,CADrD;AAEE,kCAAU,0BAAgB,kBAF5B,GADF;AAIE;AAAA;AAAA,0BAAO,SAAQ,SAAf;AAAA;AAAA;AAJF,qBAnBF;AAyBE;AAAA;AAAA,wBAAK,WAAU,0BAAf;AACE,+DAAO,MAAK,UAAZ,EAAuB,MAAK,QAA5B,EAAqC,IAAG,SAAxC,EAAkD,OAAM,SAAxD;AACE,iCAAS,KAAK,KAAL,CAAW,MAAX,CAAkB,OAAlB,CAA0B,SAA1B,MAAyC,CAAC,CADrD;AAEE,kCAAU,0BAAgB,kBAF5B,GADF;AAIE;AAAA;AAAA,0BAAO,SAAQ,SAAf;AAAA;AAAA;AAJF,qBAzBF;AA+BE;AAAA;AAAA,wBAAK,WAAU,0BAAf;AACE,+DAAO,MAAK,UAAZ,EAAuB,MAAK,QAA5B,EAAqC,IAAG,UAAxC,EAAmD,OAAM,UAAzD;AACE,iCAAS,KAAK,KAAL,CAAW,MAAX,CAAkB,OAAlB,CAA0B,UAA1B,MAA0C,CAAC,CADtD;AAEE,kCAAU,0BAAgB,kBAF5B,GADF;AAIE;AAAA;AAAA,0BAAO,SAAQ,UAAf;AAAA;AAAA;AAJF,qBA/BF;AAqCE;AAAA;AAAA,wBAAK,WAAU,0BAAf;AACE,+DAAO,MAAK,UAAZ,EAAuB,MAAK,QAA5B,EAAqC,IAAG,WAAxC,EAAoD,OAAM,WAA1D;AACE,iCAAS,KAAK,KAAL,CAAW,MAAX,CAAkB,OAAlB,CAA0B,WAA1B,MAA2C,CAAC,CADvD;AAEE,kCAAU,0BAAgB,kBAF5B,GADF;AAIE;AAAA;AAAA,0BAAO,SAAQ,WAAf;AAAA;AAAA;AAJF;AArCF,mBAfF;AA2DE;AAAA;AAAA,sBAAQ,MAAK,QAAb,EAAsB,WAAU,iBAAhC;AAAA;AAAA;AA3DF;AADF;AAFF;AADF;AADF;AADF,OADF;AA0ED;;;;EAvHmC,gBAAM,S;;kBAAvB,Q;;;;;;;;;;;ACLrB;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqB,M;;;AACnB,kBAAa,KAAb,EAAoB;AAAA;;AAAA,gHACZ,KADY;;AAGlB,UAAK,KAAL,GAAa,sBAAY,QAAZ,EAAb;;AAEA,UAAK,QAAL,GAAgB,MAAK,QAAL,CAAc,IAAd,OAAhB;AALkB;AAMnB;;;;6BAES,K,EAAO;AACf,WAAK,QAAL,CAAc,KAAd;AACD;;;wCAEoB;AACnB,4BAAY,MAAZ,CAAmB,KAAK,QAAxB;;AAEA,QAAE,QAAF,EAAY,SAAZ,CAAsB;AAAA,eAAM,wBAAc,mBAAd,CAAkC,QAAlC,CAAN;AAAA,OAAtB;AACA,QAAE,QAAF,EAAY,YAAZ,CAAyB;AAAA,eAAM,wBAAc,mBAAd,CAAkC,SAAlC,CAAN;AAAA,OAAzB;AACD;;;2CAEuB;AACtB,4BAAY,QAAZ,CAAqB,KAAK,QAA1B;AACD;;;6BAES;AACR,UAAI,iBAAiB,0DAAgB,UAAU,KAAK,KAAL,CAAW,QAArC,GAArB;AACA,aACE;AAAA;AAAA,UAAK,WAAU,yCAAf;AACE;AAAA;AAAA,YAAK,WAAU,eAAf;AACE;AAAA;AAAA,cAAQ,MAAK,QAAb,EAAsB,WAAU,yBAAhC,EAA0D,eAAY,UAAtE,EAAiF,eAAY,SAA7F;AACE;AAAA;AAAA,gBAAM,WAAU,SAAhB;AAAA;AAAA,aADF;AAEE,oDAAM,WAAU,UAAhB,GAFF;AAGE,oDAAM,WAAU,UAAhB,GAHF;AAIE,oDAAM,WAAU,UAAhB;AAJF,WADF;AAOE;AAAA;AAAA,cAAM,IAAG,GAAT,EAAa,WAAU,cAAvB;AACE;AAAA;AAAA;AACE,qBAAI,WADN;AAEE,2BAAW,wBAAwB,KAAK,KAAL,CAAW,kBAFhD;AAGE,qDAAK,WAAU,YAAf,GAHF;AAIE,qDAAK,WAAU,YAAf,GAJF;AAKE,qDAAK,WAAU,KAAf,GALF;AAME,qDAAK,WAAU,YAAf,GANF;AAOE,qDAAK,WAAU,YAAf,GAPF;AAQE,qDAAK,WAAU,KAAf,GARF;AASE,qDAAK,WAAU,YAAf,GATF;AAUE,qDAAK,WAAU,KAAf,GAVF;AAWE,qDAAK,WAAU,YAAf;AAXF,aADF;AAAA;AAAA;AAPF,SADF;AAyBE;AAAA;AAAA,YAAK,IAAG,QAAR,EAAiB,WAAU,0BAA3B;AACE;AAAA;AAAA,cAAI,WAAU,gBAAd;AACE;AAAA;AAAA;AACE;AAAA;AAAA,kBAAM,IAAG,GAAT;AAAA;AAAA;AADF,aADF;AAIE;AAAA;AAAA;AACE;AAAA;AAAA,kBAAM,IAAG,YAAT;AAAA;AAAA;AADF;AAJF,WADF;AASG;AATH;AAzBF,OADF;AAuCD;;;;EAjEiC,gBAAM,S;;kBAArB,M;;;;;;;;;;;ACNrB;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqB,W;;;AACnB,uBAAa,KAAb,EAAoB;AAAA;;AAAA,0HACZ,KADY;;AAGlB,UAAK,KAAL,GAAa,oBAAU,QAAV,EAAb;;AAEA,UAAK,QAAL,GAAgB,MAAK,QAAL,CAAc,IAAd,OAAhB;AALkB;AAMnB;;;;6BAES,K,EAAO;AACf,WAAK,QAAL,CAAc,KAAd;AACD;;;wCAEoB;AACnB,0BAAU,MAAV,CAAiB,KAAK,QAAtB;AACD;;;2CAEuB;AACtB,0BAAU,QAAV,CAAmB,KAAK,QAAxB;AACD;;;6BAES;AACR,UAAI,QAAQ,EAAZ;AACA,YAAM,KAAN,GAAc,KAAK,KAAL,CAAW,KAAX,CAAiB,GAAjB,CAAqB,UAAC,IAAD,EAAO,KAAP,EAAiB;AAClD,eACE;AAAA;AAAA,YAAI,KAAK,KAAT,EAAgB,WAAU,MAA1B;AACE;AAAA;AAAA;AAAS;AAAT;AADF,SADF;AAKD,OANa,CAAd;;AAQA,aACE;AAAA;AAAA;AACE,4DAAU,MAAM,KAAK,KAAL,CAAW,IAA3B;AACE,iBAAO,KAAK,KAAL,CAAW,KADpB;AAEE,uBAAa,KAAK,KAAL,CAAW,WAF1B,GADF;AAIE,mEAAiB,OAAO,KAAK,KAAL,CAAW,KAAnC,GAJF;AAKE,+DAAa,SAAS,KAAK,KAAL,CAAW,OAAjC;AALF,OADF;AASD;;;;EAxCsC,gBAAM,S;;kBAA1B,W;;;;;;;;;;;ACPrB;;;;AACA;;AACA;;;;;;;;;;;;IAEqB,S;;;AACnB,qBAAa,KAAb,EAAoB;AAAA;;AAAA,sHACZ,KADY;;AAGlB,UAAK,KAAL,GAAa;AACX,qBAAe,KADJ;AAEX,yBAAmB;AAFR,KAAb;AAHkB;AAOnB;;;;0CAEsB;AACrB,WAAK,QAAL,CAAc;AAAA,eAAc;AAC1B,6BAAmB,CAAC,UAAU,iBADJ;AAE1B,yBAAe;AAFW,SAAd;AAAA,OAAd;AAID;;;sCAEkB;AACjB,WAAK,QAAL,CAAc;AAAA,eAAc;AAC1B,yBAAe,CAAC,UAAU,aADA;AAE1B,6BAAmB;AAFO,SAAd;AAAA,OAAd;AAID;;;6BAES;AACR,UAAI,QAAQ,kBAAQ,cAAR,CACV,KAAK,KADK,EAEV,KAAK,KAFK,EAGV,KAAK,mBAAL,CAAyB,IAAzB,CAA8B,IAA9B,CAHU,EAIV,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAJU,CAAZ;;AAOA,aACE;AAAA;AAAA,UAAK,WAAU,iBAAf;AACE;AAAA;AAAA,YAAK,WAAU,aAAf;AACE;AAAA;AAAA,cAAM,WAAU,oBAAhB;AAAsC,iBAAK,KAAL,CAAW,KAAX,GAAmB;AAAzD,WADF;AAEE;AAAA;AAAA,cAAK,WAAU,oBAAf;AACG,kBAAM;AADT,WAFF;AAKE;AAAA;AAAA,cAAK,WAAU,YAAf;AACE;AAAA;AAAA,gBAAI,WAAU,eAAd;AACE;AAAA;AAAA,kBAAM,gBAAc,KAAK,KAAL,CAAW,KAAX,CAAiB,GAA/B,SAAsC,KAAK,KAAL,CAAW,KAAX,CAAiB,IAA7D;AACG,qBAAK,KAAL,CAAW,KAAX,CAAiB;AADpB;AADF,aADF;AAME;AAAA;AAAA;AAAA;AAAgB,oBAAM;AAAtB,aANF;AAOE,qDAPF;AAQE;AAAA;AAAA;AAAI,mBAAK,KAAL,CAAW,KAAX,CAAiB;AAArB,aARF;AASE;AAAA;AAAA,gBAAM,WAAU,OAAhB;AAAA;AAAA;AATF,WALF;AAmBG,gBAAM;AAnBT,SADF;AAsBG,cAAM,SAtBT;AAuBG,cAAM,aAvBT;AAwBE,+CAAK,IAAG,OAAR;AAxBF,OADF;AA4BD;;;;EA5DoC,gBAAM,S;;kBAAxB,S;;;;;;;;;;;ACJrB;;;;;;;;;;;;IAEqB,kB;;;;;;;;;;;6BACT;AACR,aACE;AAAA;AAAA,UAAK,WAAU,YAAf;AACE;AAAA;AAAA,YAAI,WAAU,UAAd;AAAA;AAAA;AADF,OADF;AAKD;;;;EAP6C,gBAAM,S;;kBAAjC,kB;;;;;;;;;;;ACFrB;;;;;;;;;;;;IAEqB,c;;;;;;;;;;;6BACT;AACR,aACE;AAAA;AAAA,UAAK,WAAU,+DAAf;AACE;AAAA;AAAA,YAAK,WAAU,OAAf;AACE;AAAA;AAAA,cAAK,WAAU,YAAf;AAAA;AAAA;AADF;AADF,OADF;AASD;;;;EAXyC,gBAAM,S;;kBAA7B,c;;;;;;;;;;;ACFrB;;;;AACA;;AAEA;;;;AACA;;;;;;;;;;;;IAEqB,c;;;AACnB,0BAAa,KAAb,EAAoB;AAAA;;AAAA,gIACZ,KADY;;AAGlB,UAAK,KAAL,GAAa,oBAAU,QAAV,EAAb;;AAEA,UAAK,QAAL,GAAgB,MAAK,QAAL,CAAc,IAAd,OAAhB;AALkB;AAMnB;;;;6BAES,K,EAAO;AACf,WAAK,QAAL,CAAc,KAAd;AACD;;;wCAEoB;AACnB,0BAAU,MAAV,CAAiB,KAAK,QAAtB;AACD;;;2CAEuB;AACtB,0BAAU,QAAV,CAAmB,KAAK,QAAxB;AACD;;;6BAES;AACR;AACA,UAAI,iBAAJ;AACA,UAAI,CAAC,KAAK,KAAL,CAAW,cAAhB,EAAgC;AAC9B,mBACE;AAAA;AAAA,YAAI,WAAU,2BAAd;AACE;AAAA;AAAA;AACE;AAAA;AAAA,gBAAG,MAAK,GAAR,EAAY,SAAS,sBAAY,SAAjC;AAAA;AAAA;AADF,WADF;AAIE;AAAA;AAAA;AACE;AAAA;AAAA,gBAAM,IAAG,gBAAT;AAAA;AAAA;AADF;AAJF,SADF;AAUD,OAXD,MAWO;AACL,mBACE;AAAA;AAAA,YAAI,WAAU,2BAAd;AACE;AAAA;AAAA;AACE;AAAA;AAAA,gBAAM,uBAAqB,KAAK,KAAL,CAAW,cAAtC;AAAA;AAAA;AADF,WADF;AAIE;AAAA;AAAA;AACE;AAAA;AAAA,gBAAG,MAAK,GAAR,EAAY,SAAS,sBAAY,UAAjC;AAAA;AAAA;AADF;AAJF,SADF;AAUD;;AAED,aACE;AAAA;AAAA;AACG;AADH,OADF;AAKD;;;;EArDyC,gBAAM,S;;kBAA7B,c;;;;;;;;;;;ACNrB;;;;;;;;;;;;IAEqB,Q;;;AACnB,oBAAa,KAAb,EAAoB;AAAA;;AAAA,+GACZ,KADY;AAEnB;;;;6BAES;AACR,UAAI,cAAJ;;AAEA,UAAI,KAAK,KAAL,CAAW,KAAf,EAAsB;AACpB,gBAAQ,KAAK,KAAL,CAAW,KAAX,CAAiB,GAAjB,CAAqB,UAAC,IAAD,EAAO,KAAP,EAAiB;AAC5C,iBACE;AAAA;AAAA,cAAI,KAAK,KAAT,EAAgB,WAAU,MAA1B;AACE;AAAA;AAAA;AAAS;AAAT;AADF,WADF;AAKD,SANO,CAAR;AAOD;;AAED,aACE;AAAA;AAAA,UAAK,WAAU,6BAAf;AACE;AAAA;AAAA,YAAK,WAAU,aAAf;AACE,iDAAK,KAAI,iCAAT;AADF,SADF;AAIE;AAAA;AAAA,YAAK,WAAU,uBAAf;AACE;AAAA;AAAA;AAAI;AAAA;AAAA;AAAU,mBAAK,KAAL,CAAW;AAArB;AAAJ,WADF;AAEE;AAAA;AAAA,cAAI,WAAU,MAAd;AAAA;AAAA,WAFF;AAGI,eAHJ;AAIE;AAAA;AAAA;AAAK,iBAAK,KAAL,CAAW;AAAhB;AAJF;AAJF,OADF;AAaD;;;;EA/BmC,gBAAM,S;;kBAAvB,Q;;;;;;;;;;;ACFrB;;;;AAEA;;;;;;;;;;;;IAEqB,e;;;AACnB,2BAAa,KAAb,EAAoB;AAAA;;AAAA,kIACZ,KADY;;AAGlB,UAAK,KAAL,GAAa;AACX,4BAAsB;AADX,KAAb;AAHkB;AAMnB;;;;wCAEoB;AACnB,WAAK,QAAL,CAAc;AAAA,eAAc;AAC1B,gCAAsB,CAAC,UAAU;AADP,SAAd;AAAA,OAAd;AAGD;;;6BAES;AACR,aACE;AAAA;AAAA,UAAK,WAAU,6BAAf;AACE;AAAA;AAAA,YAAK,WAAU,wBAAf;AACE;AAAA;AAAA;AACE;AAAA;AAAA;AACE;AAAA;AAAA,kBAAM,WAAU,cAAhB;AAAgC,qBAAK,KAAL,CAAW,KAAX,GAAmB,KAAK,KAAL,CAAW,KAAX,CAAiB,MAApC,GAA6C;AAA7E,eADF;AAAA;AAAA;AADF;AADF,SADF;AAQE;AAAA;AAAA,YAAK,WAAU,sBAAf;AACE;AAAA;AAAA,cAAG,WAAU,iBAAb,EAA+B,SAAS,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CAAxC;AACI,iBAAK,KAAL,CAAW,oBAAX,GAAkC,MAAlC,GAA2C;AAD/C;AADF,SARF;AAaI,aAAK,KAAL,CAAW,oBAAX,GAAkC,gEAAsB,QAAQ,KAAK,KAAL,CAAW,KAAzC,GAAlC,GAAuF;AAb3F,OADF;AAiBD;;;;EAjC0C,gBAAM,S;;kBAA9B,e;;;;;;;;;;;ACJrB;;;;;;;;;;;;IAEqB,oB;;;;;;;;;;;6BACT;AACR,aACE;AAAA;AAAA;AAAA;AAAA,OADF;AAGD;;;;;;kBALkB,oB;;;;;;;;;;;ACFrB;;;;AAEA;;;;;;;;;;;;IAEqB,W;;;AACnB,uBAAa,KAAb,EAAoB;AAAA;;AAAA,0HACZ,KADY;;AAGlB,UAAK,KAAL,GAAa;AACX,wBAAkB;AADP,KAAb;AAHkB;AAMnB;;;;oCAEgB;AACf,WAAK,QAAL,CAAc;AAAA,eAAc;AAC1B,4BAAkB,CAAC,UAAU;AADH,SAAd;AAAA,OAAd;AAGD;;;6BAES;AACR,aACE;AAAA;AAAA,UAAK,WAAU,6BAAf;AACE;AAAA;AAAA,YAAK,WAAU,wBAAf;AACE;AAAA;AAAA;AACE;AAAA;AAAA;AACE;AAAA;AAAA,kBAAM,WAAU,cAAhB;AAAgC,qBAAK,KAAL,CAAW,OAAX,GAAqB,KAAK,KAAL,CAAW,OAAX,CAAmB,MAAxC,GAAiD;AAAjF,eADF;AAAA;AAAA;AADF;AADF,SADF;AAQE;AAAA;AAAA,YAAK,WAAU,sBAAf;AACE;AAAA;AAAA,cAAG,WAAU,iBAAb,EAA+B,SAAS,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAAxC;AACI,iBAAK,KAAL,CAAW,gBAAX,GAA8B,MAA9B,GAAuC;AAD3C;AADF,SARF;AAaI,aAAK,KAAL,CAAW,gBAAX,GAA8B,4DAAkB,SAAS,KAAK,KAAL,CAAW,OAAtC,GAA9B,GAAkF;AAbtF,OADF;AAiBD;;;;EAjCsC,gBAAM,S;;kBAA1B,W;;;;;;;;;;;ACJrB;;;;;;;;;;;;IAEqB,gB;;;AACnB,4BAAa,KAAb,EAAoB;AAAA;;AAAA,+HACZ,KADY;AAEnB;;;;6BAES;AACR,aACE;AAAA;AAAA,UAAK,WAAU,WAAf;AACE;AAAA;AAAA,YAAK,WAAU,YAAf;AAAA;AAAA;AADF,OADF;AAOD;;;;EAb2C,gBAAM,S;;kBAA/B,gB;;;;;ACFrB;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAI,UAAU,qCAAd;;AAEA,mBAAS,MAAT,CACI;AAAA;AAAA,MAAQ,SAAS,OAAjB;AAAA;AAAA,CADJ,EAEI,SAAS,cAAT,CAAwB,KAAxB,CAFJ;;;;;;;;;ACTA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAGI;AAAA;AAAA,MAAO,wBAAP;AACI,wDAAO,MAAK,GAAZ,EAAgB,yBAAhB,GADJ;AAEI,wDAAO,MAAK,YAAZ,EAAyB,6BAAzB,GAFJ;AAGI,wDAAO,MAAK,sBAAZ,EAAmC,gCAAnC;AAHJ,C;;;;;;;;;;;ACTJ;;;;AACA;;;;;;;;IAEM,W;AACJ,yBAAe;AAAA;;AACb,SAAK,WAAL;;AAEA,SAAK,gBAAL,GAAwB,EAAxB;AACD;;;;iDAE6B,I,EAAM;AAClC,WAAK,gBAAL,GAAwB,IAAxB;AACD;;;;;;kBAGY,cAAI,WAAJ,CAAgB,WAAhB,C;;;;;;;;;;;ACff;;;;AACA;;;;;;;;IAEM,S;AACJ,uBAAe;AAAA;;AACb,SAAK,WAAL;;AAEA,SAAK,YAAL,GAAoB,EAApB;AACD;;;;6CAEyB,M,EAAQ;AAChC,WAAK,YAAL,GAAoB,MAApB;AACD;;;0CAEsB,G,EAAK;AAC1B,cAAQ,GAAR,CAAY,yBAAZ,EAAuC,GAAvC;AACD;;;;;;kBAGY,cAAI,WAAJ,CAAgB,SAAhB,C;;;;;;;;;;;ACnBf;;;;AACA;;;;AACA;;;;;;;;IAEM,a;AACJ,2BAAe;AAAA;;AACb,SAAK,WAAL;;AAEA,SAAK,IAAL,GAAY,EAAZ;AACA,SAAK,WAAL,GAAmB,EAAnB;AACA,SAAK,MAAL,GAAc,EAAd;AACA,SAAK,cAAL,GAAsB,EAAtB;AACA,SAAK,qBAAL,GAA6B,EAA7B;AACA,SAAK,mBAAL,GAA2B,EAA3B;AACA,SAAK,SAAL,GAAiB,EAAjB;AACD;;;;wCAEoB;AACnB,cAAQ,GAAR,CAAY,cAAZ;AACD;;;mCAEe,G,EAAK;AACnB,cAAQ,GAAR,CAAY,qBAAZ,EAAmC,GAAnC;AACD;;;uCAEmB,C,EAAG;AACrB,WAAK,IAAL,GAAY,EAAE,MAAF,CAAS,KAArB;AACA,WAAK,mBAAL,GAA2B,EAA3B;AACA,WAAK,SAAL,GAAiB,EAAjB;AACD;;;8CAE0B,C,EAAG;AAC5B,WAAK,WAAL,GAAmB,EAAE,MAAF,CAAS,KAA5B;AACA,WAAK,qBAAL,GAA6B,EAA7B;AACA,WAAK,SAAL,GAAiB,EAAjB;AACD;;;yCAEqB,C,EAAG;AACvB,cAAQ,GAAR,CAAY,CAAZ;AACA,UAAI,aAAa,EAAE,MAAF,CAAS,KAA1B;AACA,UAAI,KAAK,MAAL,CAAY,OAAZ,CAAoB,UAApB,MAAoC,CAAC,CAAzC,EAA4C;AAC1C,aAAK,MAAL,GAAc,kBAAQ,aAAR,CAAsB,UAAtB,EAAkC,KAAK,MAAvC,CAAd;AACD,OAFD,MAEO;AACL,aAAK,MAAL,GAAc,kBAAQ,eAAR,CAAwB,UAAxB,EAAoC,KAAK,MAAzC,CAAd;AACD;;AAED,WAAK,qBAAL,GAA6B,EAA7B;AACA,WAAK,SAAL,GAAiB,EAAjB;AACD;;;2CAEuB;AACtB,WAAK,mBAAL,GAA2B,WAA3B;AACA,WAAK,SAAL,GAAiB,kBAAjB;AACD;;;6CAEyB;AACxB,WAAK,qBAAL,GAA6B,WAA7B;AACA,WAAK,SAAL,GAAiB,iCAAjB;AACD;;;;;;kBAGY,cAAI,WAAJ,CAAgB,aAAhB,C;;;;;;;;;;;AC7Df;;;;AACA;;;;;;;;IAEM,W;AACJ,yBAAe;AAAA;;AACb,SAAK,WAAL;;AAEA,SAAK,kBAAL,GAA0B,EAA1B;AACD;;;;0CAEsB,c,EAAgB;AACrC,WAAK,kBAAL,GAA0B,cAA1B;AACD;;;;;;kBAGY,cAAI,WAAJ,CAAgB,WAAhB,C;;;;;;;;;;;ACff;;;;AACA;;;;;;;;IAEM,S;AACJ,uBAAe;AAAA;;AACb,SAAK,WAAL,wBADa,CACiB;;AAE9B,SAAK,cAAL,GAAsB,EAAtB;AACA,SAAK,QAAL,GAAgB,EAAhB;AACA,SAAK,KAAL,GAAa,EAAb;AACD;;;;uCAEmB,I,EAAM;AACxB,WAAK,cAAL,GAAsB,KAAK,GAA3B;AACA,WAAK,QAAL,GAAgB,KAAK,QAArB;AACA,WAAK,KAAL,GAAa,KAAK,KAAlB;AACD;;;sCAEkB;AACjB,cAAQ,GAAR,CAAY,sBAAZ;AACD;;;0CAEsB;AACrB,WAAK,cAAL,GAAsB,EAAtB;AACA,WAAK,QAAL,GAAgB,EAAhB;AACA,WAAK,KAAL,GAAa,EAAb;AACD;;;;;;kBAGY,cAAI,WAAJ,CAAgB,SAAhB,C;;;;;;;;;;;AC7Bf;;;;AACA;;AAEA;;;;AACA;;;;;;;;IAEqB,O;;;;;;;kCACG,K,EAAO,K,EAAO;AAClC,YAAM,IAAN,CAAW,KAAX;;AAEA,aAAO,KAAP;AACD;;;mCAEsB,K,EAAO,K,EAAO;AACnC,YAAM,OAAN,CAAc,KAAd;;AAEA,aAAO,KAAP;AACD;;;oCAEuB,K,EAAO,K,EAAO;AACpC,UAAI,QAAQ,MAAM,OAAN,CAAc,KAAd,CAAZ;;AAEA,UAAI,UAAU,CAAC,CAAf,EAAkB;AAChB,cAAM,MAAN,CAAa,KAAb,EAAoB,CAApB;AACD;;AAED,aAAO,KAAP;AACD;;;mCAEsB,K,EAAO,K,EAAO,mB,EAAqB,e,EAAiB;AACzE,UAAI,QAAQ,EAAZ;;AAEA,UAAI,MAAM,iBAAV,EAA6B;AAC3B,cAAM,aAAN,GAAsB,8DAAoB,SAAS,MAAM,KAAN,CAAY,GAAzC,GAAtB;AACD;;AAED,UAAI,MAAM,aAAV,EAAyB;AACvB,cAAM,SAAN,GAAkB,0DAAgB,SAAS,MAAM,KAAN,CAAY,GAArC,GAAlB;AACD;;AAED,YAAM,YAAN,GACE;AAAA;AAAA,UAAK,WAAU,sBAAf;AACE;AAAA;AAAA,YAAG,WAAU,iBAAb;AACE,qBAAS,mBADX;AACiC,gBAAM,iBAAN,GAA0B,MAA1B,GAAmC;AADpE,SADF;AAGE;AAAA;AAAA,YAAG,WAAU,iBAAb;AACE,qBAAS,eADX;AAC6B,gBAAM,aAAN,GAAsB,MAAtB,GAA+B;AAD5D,SAHF;AAKE;AAAA;AAAA,YAAM,gBAAc,MAAM,KAAN,CAAY,GAA1B,gBAAN,EAAkD,WAAU,iBAA5D;AAAA;AAAA;AALF,OADF;;AAUA,YAAM,MAAN,GAAe,MAAM,KAAN,CAAY,MAAZ,CAAmB,GAAnB,CAAuB,iBAAS;AAC7C,eACE;AAAA;AAAA,YAAQ,KAAK,MAAM,KAAN,CAAY,GAAZ,GAAkB,KAA/B;AAAuC;AAAvC,SADF;AAGD,OAJc,CAAf;;AAMA,UAAI,MAAM,KAAN,CAAY,cAAhB,EAAgC;AAC9B,cAAM,MAAN,GACE,uCAAK,WAAU,cAAf,EAA8B,KAAK,MAAM,KAAN,CAAY,cAA/C,GADF;AAGD;;AAED,aAAO,KAAP;AACD;;;;;;kBAzDkB,O;;;;;;;;;;;;;ACNrB,IAAM,UAAU,kCAAhB;AACA,IAAM,kBAAkB,2CAAxB;AACA,IAAM,kBAAkB,iCAAxB;AACA,IAAM,8BAA8B,8BAApC;AACA,IAAM,0BAA0B,gCAAhC;;IAEqB,a;;;;;;;mCACI,S,EAAW;AAChC,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,YAAI,UAAU;AACZ,kBAAQ,KADI;AAEZ,eAAQ,eAAR,iBAAmC,OAAnC,eAAoD;AAFxC,SAAd;;AAKA,UAAE,IAAF,CAAO,OAAP,EACG,IADH,CACQ,wBAAgB;AACpB,kBAAQ,GAAR,CAAY,eAAZ,EAA6B,YAA7B;AACA,cAAI,aAAa,aAAb,KAA+B,CAAnC,EAAsC;AACpC,oBAAQ,EAAC,WAAW,2BAAZ,EAAR;AACA;AACD;;AAED,cAAI,aAAa,aAAa,OAAb,CAAqB,CAArB,EAAwB,WAAzC;AACA,cAAI,eAAe,IAAnB,EAAyB;AACvB,oBAAQ,EAAC,WAAW,uBAAZ,EAAR;AACA;AACD;AACD,kBAAQ,EAAC,WAAc,eAAd,SAAiC,UAAlC,EAAR;AACD,SAdH,EAeG,IAfH,CAeQ,eAAO;AACX,iBAAO;AACL,2BAAe,gBADV;AAEL,mBAAO;AAFF,WAAP;AAID,SApBH;AAqBD,OA3BM,CAAP;AA4BD;;;;;;kBA9BkB,a","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = makeAction;\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nvar _AltUtils = require('../utils/AltUtils');\n\nvar utils = _interopRequireWildcard(_AltUtils);\n\nvar _isPromise = require('is-promise');\n\nvar _isPromise2 = _interopRequireDefault(_isPromise);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction makeAction(alt, namespace, name, implementation, obj) {\n  var id = utils.uid(alt._actionsRegistry, String(namespace) + '.' + String(name));\n  alt._actionsRegistry[id] = 1;\n\n  var data = { id: id, namespace: namespace, name: name };\n\n  var dispatch = function dispatch(payload) {\n    return alt.dispatch(id, payload, data);\n  };\n\n  // the action itself\n  var action = function action() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var invocationResult = implementation.apply(obj, args);\n    var actionResult = invocationResult;\n\n    // async functions that return promises should not be dispatched\n    if (invocationResult !== undefined && !(0, _isPromise2['default'])(invocationResult)) {\n      if (fn.isFunction(invocationResult)) {\n        // inner function result should be returned as an action result\n        actionResult = invocationResult(dispatch, alt);\n      } else {\n        dispatch(invocationResult);\n      }\n    }\n\n    if (invocationResult === undefined) {\n      utils.warn('An action was called but nothing was dispatched');\n    }\n\n    return actionResult;\n  };\n  action.defer = function () {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return setTimeout(function () {\n      return action.apply(null, args);\n    });\n  };\n  action.id = id;\n  action.data = data;\n\n  // ensure each reference is unique in the namespace\n  var container = alt.actions[namespace];\n  var namespaceId = utils.uid(container, name);\n  container[namespaceId] = action;\n\n  // generate a constant\n  var constant = utils.formatAsConstant(namespaceId);\n  container[constant] = id;\n\n  return action;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isMutableObject = isMutableObject;\nexports.eachObject = eachObject;\nexports.assign = assign;\nvar isFunction = exports.isFunction = function isFunction(x) {\n  return typeof x === 'function';\n};\n\nfunction isMutableObject(target) {\n  var Ctor = target.constructor;\n\n  return !!target && Object.prototype.toString.call(target) === '[object Object]' && isFunction(Ctor) && !Object.isFrozen(target) && (Ctor instanceof Ctor || target.type === 'AltStore');\n}\n\nfunction eachObject(f, o) {\n  o.forEach(function (from) {\n    Object.keys(Object(from)).forEach(function (key) {\n      f(key, from[key]);\n    });\n  });\n}\n\nfunction assign(target) {\n  for (var _len = arguments.length, source = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    source[_key - 1] = arguments[_key];\n  }\n\n  eachObject(function (key, value) {\n    return target[key] = value;\n  }, source);\n  return target;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _flux = require('flux');\n\nvar _StateFunctions = require('./utils/StateFunctions');\n\nvar StateFunctions = _interopRequireWildcard(_StateFunctions);\n\nvar _functions = require('./functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nvar _store = require('./store');\n\nvar store = _interopRequireWildcard(_store);\n\nvar _AltUtils = require('./utils/AltUtils');\n\nvar utils = _interopRequireWildcard(_AltUtils);\n\nvar _actions = require('./actions');\n\nvar _actions2 = _interopRequireDefault(_actions);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /* global window */\n\n\nvar Alt = function () {\n  function Alt() {\n    var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    _classCallCheck(this, Alt);\n\n    this.config = config;\n    this.serialize = config.serialize || JSON.stringify;\n    this.deserialize = config.deserialize || JSON.parse;\n    this.dispatcher = config.dispatcher || new _flux.Dispatcher();\n    this.batchingFunction = config.batchingFunction || function (callback) {\n      return callback();\n    };\n    this.actions = { global: {} };\n    this.stores = {};\n    this.storeTransforms = config.storeTransforms || [];\n    this.trapAsync = false;\n    this._actionsRegistry = {};\n    this._initSnapshot = {};\n    this._lastSnapshot = {};\n  }\n\n  Alt.prototype.dispatch = function () {\n    function dispatch(action, data, details) {\n      var _this = this;\n\n      this.batchingFunction(function () {\n        var id = Math.random().toString(18).substr(2, 16);\n\n        // support straight dispatching of FSA-style actions\n        if (action.hasOwnProperty('type') && action.hasOwnProperty('payload')) {\n          var fsaDetails = {\n            id: action.type,\n            namespace: action.type,\n            name: action.type\n          };\n          return _this.dispatcher.dispatch(utils.fsa(id, action.type, action.payload, fsaDetails));\n        }\n\n        if (action.id && action.dispatch) {\n          return utils.dispatch(id, action, data, _this);\n        }\n\n        return _this.dispatcher.dispatch(utils.fsa(id, action, data, details));\n      });\n    }\n\n    return dispatch;\n  }();\n\n  Alt.prototype.createUnsavedStore = function () {\n    function createUnsavedStore(StoreModel) {\n      var key = StoreModel.displayName || '';\n      store.createStoreConfig(this.config, StoreModel);\n      var Store = store.transformStore(this.storeTransforms, StoreModel);\n\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return fn.isFunction(Store) ? store.createStoreFromClass.apply(store, [this, Store, key].concat(args)) : store.createStoreFromObject(this, Store, key);\n    }\n\n    return createUnsavedStore;\n  }();\n\n  Alt.prototype.createStore = function () {\n    function createStore(StoreModel, iden) {\n      var key = iden || StoreModel.displayName || StoreModel.name || '';\n      store.createStoreConfig(this.config, StoreModel);\n      var Store = store.transformStore(this.storeTransforms, StoreModel);\n\n      /* istanbul ignore next */\n      if (module.hot) delete this.stores[key];\n\n      if (this.stores[key] || !key) {\n        if (this.stores[key]) {\n          utils.warn('A store named ' + String(key) + ' already exists, double check your store ' + 'names or pass in your own custom identifier for each store');\n        } else {\n          utils.warn('Store name was not specified');\n        }\n\n        key = utils.uid(this.stores, key);\n      }\n\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      var storeInstance = fn.isFunction(Store) ? store.createStoreFromClass.apply(store, [this, Store, key].concat(args)) : store.createStoreFromObject(this, Store, key);\n\n      this.stores[key] = storeInstance;\n      StateFunctions.saveInitialSnapshot(this, key);\n\n      return storeInstance;\n    }\n\n    return createStore;\n  }();\n\n  Alt.prototype.generateActions = function () {\n    function generateActions() {\n      var actions = { name: 'global' };\n\n      for (var _len3 = arguments.length, actionNames = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        actionNames[_key3] = arguments[_key3];\n      }\n\n      return this.createActions(actionNames.reduce(function (obj, action) {\n        obj[action] = utils.dispatchIdentity;\n        return obj;\n      }, actions));\n    }\n\n    return generateActions;\n  }();\n\n  Alt.prototype.createAction = function () {\n    function createAction(name, implementation, obj) {\n      return (0, _actions2['default'])(this, 'global', name, implementation, obj);\n    }\n\n    return createAction;\n  }();\n\n  Alt.prototype.createActions = function () {\n    function createActions(ActionsClass) {\n      var _this3 = this;\n\n      var exportObj = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var actions = {};\n      var key = utils.uid(this._actionsRegistry, ActionsClass.displayName || ActionsClass.name || 'Unknown');\n\n      if (fn.isFunction(ActionsClass)) {\n        fn.assign(actions, utils.getPrototypeChain(ActionsClass));\n\n        var ActionsGenerator = function (_ActionsClass) {\n          _inherits(ActionsGenerator, _ActionsClass);\n\n          function ActionsGenerator() {\n            _classCallCheck(this, ActionsGenerator);\n\n            for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n              args[_key5] = arguments[_key5];\n            }\n\n            return _possibleConstructorReturn(this, _ActionsClass.call.apply(_ActionsClass, [this].concat(args)));\n          }\n\n          ActionsGenerator.prototype.generateActions = function () {\n            function generateActions() {\n              for (var _len6 = arguments.length, actionNames = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n                actionNames[_key6] = arguments[_key6];\n              }\n\n              actionNames.forEach(function (actionName) {\n                actions[actionName] = utils.dispatchIdentity;\n              });\n            }\n\n            return generateActions;\n          }();\n\n          return ActionsGenerator;\n        }(ActionsClass);\n\n        for (var _len4 = arguments.length, argsForConstructor = Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n          argsForConstructor[_key4 - 2] = arguments[_key4];\n        }\n\n        fn.assign(actions, new (Function.prototype.bind.apply(ActionsGenerator, [null].concat(argsForConstructor)))());\n      } else {\n        fn.assign(actions, ActionsClass);\n      }\n\n      this.actions[key] = this.actions[key] || {};\n\n      fn.eachObject(function (actionName, action) {\n        if (!fn.isFunction(action)) {\n          exportObj[actionName] = action;\n          return;\n        }\n\n        // create the action\n        exportObj[actionName] = (0, _actions2['default'])(_this3, key, actionName, action, exportObj);\n\n        // generate a constant\n        var constant = utils.formatAsConstant(actionName);\n        exportObj[constant] = exportObj[actionName].id;\n      }, [actions]);\n\n      return exportObj;\n    }\n\n    return createActions;\n  }();\n\n  Alt.prototype.takeSnapshot = function () {\n    function takeSnapshot() {\n      for (var _len7 = arguments.length, storeNames = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        storeNames[_key7] = arguments[_key7];\n      }\n\n      var state = StateFunctions.snapshot(this, storeNames);\n      fn.assign(this._lastSnapshot, state);\n      return this.serialize(state);\n    }\n\n    return takeSnapshot;\n  }();\n\n  Alt.prototype.rollback = function () {\n    function rollback() {\n      StateFunctions.setAppState(this, this.serialize(this._lastSnapshot), function (storeInst) {\n        storeInst.lifecycle('rollback');\n        storeInst.emitChange();\n      });\n    }\n\n    return rollback;\n  }();\n\n  Alt.prototype.recycle = function () {\n    function recycle() {\n      for (var _len8 = arguments.length, storeNames = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        storeNames[_key8] = arguments[_key8];\n      }\n\n      var initialSnapshot = storeNames.length ? StateFunctions.filterSnapshots(this, this._initSnapshot, storeNames) : this._initSnapshot;\n\n      StateFunctions.setAppState(this, this.serialize(initialSnapshot), function (storeInst) {\n        storeInst.lifecycle('init');\n        storeInst.emitChange();\n      });\n    }\n\n    return recycle;\n  }();\n\n  Alt.prototype.flush = function () {\n    function flush() {\n      var state = this.serialize(StateFunctions.snapshot(this));\n      this.recycle();\n      return state;\n    }\n\n    return flush;\n  }();\n\n  Alt.prototype.bootstrap = function () {\n    function bootstrap(data) {\n      StateFunctions.setAppState(this, data, function (storeInst, state) {\n        storeInst.lifecycle('bootstrap', state);\n        storeInst.emitChange();\n      });\n    }\n\n    return bootstrap;\n  }();\n\n  Alt.prototype.prepare = function () {\n    function prepare(storeInst, payload) {\n      var data = {};\n      if (!storeInst.displayName) {\n        throw new ReferenceError('Store provided does not have a name');\n      }\n      data[storeInst.displayName] = payload;\n      return this.serialize(data);\n    }\n\n    return prepare;\n  }();\n\n  // Instance type methods for injecting alt into your application as context\n\n  Alt.prototype.addActions = function () {\n    function addActions(name, ActionsClass) {\n      for (var _len9 = arguments.length, args = Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {\n        args[_key9 - 2] = arguments[_key9];\n      }\n\n      this.actions[name] = Array.isArray(ActionsClass) ? this.generateActions.apply(this, ActionsClass) : this.createActions.apply(this, [ActionsClass].concat(args));\n    }\n\n    return addActions;\n  }();\n\n  Alt.prototype.addStore = function () {\n    function addStore(name, StoreModel) {\n      for (var _len10 = arguments.length, args = Array(_len10 > 2 ? _len10 - 2 : 0), _key10 = 2; _key10 < _len10; _key10++) {\n        args[_key10 - 2] = arguments[_key10];\n      }\n\n      this.createStore.apply(this, [StoreModel, name].concat(args));\n    }\n\n    return addStore;\n  }();\n\n  Alt.prototype.getActions = function () {\n    function getActions(name) {\n      return this.actions[name];\n    }\n\n    return getActions;\n  }();\n\n  Alt.prototype.getStore = function () {\n    function getStore(name) {\n      return this.stores[name];\n    }\n\n    return getStore;\n  }();\n\n  Alt.debug = function () {\n    function debug(name, alt, win) {\n      var key = 'alt.js.org';\n      var context = win;\n      if (!context && typeof window !== 'undefined') {\n        context = window;\n      }\n      if (typeof context !== 'undefined') {\n        context[key] = context[key] || [];\n        context[key].push({ name: name, alt: alt });\n      }\n      return alt;\n    }\n\n    return debug;\n  }();\n\n  return Alt;\n}();\n\nexports['default'] = Alt;\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nvar _transmitter = require('transmitter');\n\nvar _transmitter2 = _interopRequireDefault(_transmitter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar AltStore = function () {\n  function AltStore(alt, model, state, StoreModel) {\n    var _this = this;\n\n    _classCallCheck(this, AltStore);\n\n    var lifecycleEvents = model.lifecycleEvents;\n    this.transmitter = (0, _transmitter2['default'])();\n    this.lifecycle = function (event, x) {\n      if (lifecycleEvents[event]) lifecycleEvents[event].publish(x);\n    };\n    this.state = state;\n\n    this.alt = alt;\n    this.preventDefault = false;\n    this.displayName = model.displayName;\n    this.boundListeners = model.boundListeners;\n    this.StoreModel = StoreModel;\n    this.reduce = model.reduce || function (x) {\n      return x;\n    };\n    this.subscriptions = [];\n\n    var output = model.output || function (x) {\n      return x;\n    };\n\n    this.emitChange = function () {\n      return _this.transmitter.publish(output(_this.state));\n    };\n\n    var handleDispatch = function handleDispatch(f, payload) {\n      try {\n        return f();\n      } catch (e) {\n        if (model.handlesOwnErrors) {\n          _this.lifecycle('error', {\n            error: e,\n            payload: payload,\n            state: _this.state\n          });\n          return false;\n        }\n\n        throw e;\n      }\n    };\n\n    fn.assign(this, model.publicMethods);\n\n    // Register dispatcher\n    this.dispatchToken = alt.dispatcher.register(function (payload) {\n      _this.preventDefault = false;\n\n      _this.lifecycle('beforeEach', {\n        payload: payload,\n        state: _this.state\n      });\n\n      var actionHandlers = model.actionListeners[payload.action];\n\n      if (actionHandlers || model.otherwise) {\n        var result = void 0;\n\n        if (actionHandlers) {\n          result = handleDispatch(function () {\n            return actionHandlers.filter(Boolean).every(function (handler) {\n              return handler.call(model, payload.data, payload.action) !== false;\n            });\n          }, payload);\n        } else {\n          result = handleDispatch(function () {\n            return model.otherwise(payload.data, payload.action);\n          }, payload);\n        }\n\n        if (result !== false && !_this.preventDefault) _this.emitChange();\n      }\n\n      if (model.reduce) {\n        handleDispatch(function () {\n          var value = model.reduce(_this.state, payload);\n          if (value !== undefined) _this.state = value;\n        }, payload);\n        if (!_this.preventDefault) _this.emitChange();\n      }\n\n      _this.lifecycle('afterEach', {\n        payload: payload,\n        state: _this.state\n      });\n    });\n\n    this.lifecycle('init');\n  }\n\n  AltStore.prototype.listen = function () {\n    function listen(cb) {\n      var _this2 = this;\n\n      if (!fn.isFunction(cb)) throw new TypeError('listen expects a function');\n\n      var _transmitter$subscrib = this.transmitter.subscribe(cb);\n\n      var dispose = _transmitter$subscrib.dispose;\n\n      this.subscriptions.push({ cb: cb, dispose: dispose });\n      return function () {\n        _this2.lifecycle('unlisten');\n        dispose();\n      };\n    }\n\n    return listen;\n  }();\n\n  AltStore.prototype.unlisten = function () {\n    function unlisten(cb) {\n      this.lifecycle('unlisten');\n      this.subscriptions.filter(function (subscription) {\n        return subscription.cb === cb;\n      }).forEach(function (subscription) {\n        return subscription.dispose();\n      });\n    }\n\n    return unlisten;\n  }();\n\n  AltStore.prototype.getState = function () {\n    function getState() {\n      return this.StoreModel.config.getState.call(this, this.state);\n    }\n\n    return getState;\n  }();\n\n  return AltStore;\n}();\n\nexports['default'] = AltStore;\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _transmitter = require('transmitter');\n\nvar _transmitter2 = _interopRequireDefault(_transmitter);\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar StoreMixin = {\n  waitFor: function () {\n    function waitFor() {\n      for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {\n        sources[_key] = arguments[_key];\n      }\n\n      if (!sources.length) {\n        throw new ReferenceError('Dispatch tokens not provided');\n      }\n\n      var sourcesArray = sources;\n      if (sources.length === 1) {\n        sourcesArray = Array.isArray(sources[0]) ? sources[0] : sources;\n      }\n\n      var tokens = sourcesArray.map(function (source) {\n        return source.dispatchToken || source;\n      });\n\n      this.dispatcher.waitFor(tokens);\n    }\n\n    return waitFor;\n  }(),\n  exportAsync: function () {\n    function exportAsync(asyncMethods) {\n      this.registerAsync(asyncMethods);\n    }\n\n    return exportAsync;\n  }(),\n  registerAsync: function () {\n    function registerAsync(asyncDef) {\n      var _this = this;\n\n      var loadCounter = 0;\n\n      var asyncMethods = fn.isFunction(asyncDef) ? asyncDef(this.alt) : asyncDef;\n\n      var toExport = Object.keys(asyncMethods).reduce(function (publicMethods, methodName) {\n        var desc = asyncMethods[methodName];\n        var spec = fn.isFunction(desc) ? desc(_this) : desc;\n\n        var validHandlers = ['success', 'error', 'loading'];\n        validHandlers.forEach(function (handler) {\n          if (spec[handler] && !spec[handler].id) {\n            throw new Error(String(handler) + ' handler must be an action function');\n          }\n        });\n\n        publicMethods[methodName] = function () {\n          for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          var state = _this.getInstance().getState();\n          var value = spec.local && spec.local.apply(spec, [state].concat(args));\n          var shouldFetch = spec.shouldFetch ? spec.shouldFetch.apply(spec, [state].concat(args))\n          /*eslint-disable*/\n          : value == null;\n          /*eslint-enable*/\n          var intercept = spec.interceptResponse || function (x) {\n            return x;\n          };\n\n          var makeActionHandler = function () {\n            function makeActionHandler(action, isError) {\n              return function (x) {\n                var fire = function () {\n                  function fire() {\n                    loadCounter -= 1;\n                    action(intercept(x, action, args));\n                    if (isError) throw x;\n                    return x;\n                  }\n\n                  return fire;\n                }();\n                return _this.alt.trapAsync ? function () {\n                  return fire();\n                } : fire();\n              };\n            }\n\n            return makeActionHandler;\n          }();\n\n          // if we don't have it in cache then fetch it\n          if (shouldFetch) {\n            loadCounter += 1;\n            /* istanbul ignore else */\n            if (spec.loading) spec.loading(intercept(null, spec.loading, args));\n            return spec.remote.apply(spec, [state].concat(args)).then(makeActionHandler(spec.success), makeActionHandler(spec.error, 1));\n          }\n\n          // otherwise emit the change now\n          _this.emitChange();\n          return value;\n        };\n\n        return publicMethods;\n      }, {});\n\n      this.exportPublicMethods(toExport);\n      this.exportPublicMethods({\n        isLoading: function () {\n          function isLoading() {\n            return loadCounter > 0;\n          }\n\n          return isLoading;\n        }()\n      });\n    }\n\n    return registerAsync;\n  }(),\n  exportPublicMethods: function () {\n    function exportPublicMethods(methods) {\n      var _this2 = this;\n\n      fn.eachObject(function (methodName, value) {\n        if (!fn.isFunction(value)) {\n          throw new TypeError('exportPublicMethods expects a function');\n        }\n\n        _this2.publicMethods[methodName] = value;\n      }, [methods]);\n    }\n\n    return exportPublicMethods;\n  }(),\n  emitChange: function () {\n    function emitChange() {\n      this.getInstance().emitChange();\n    }\n\n    return emitChange;\n  }(),\n  on: function () {\n    function on(lifecycleEvent, handler) {\n      if (lifecycleEvent === 'error') this.handlesOwnErrors = true;\n      var bus = this.lifecycleEvents[lifecycleEvent] || (0, _transmitter2['default'])();\n      this.lifecycleEvents[lifecycleEvent] = bus;\n      return bus.subscribe(handler.bind(this));\n    }\n\n    return on;\n  }(),\n  bindAction: function () {\n    function bindAction(symbol, handler) {\n      if (!symbol) {\n        throw new ReferenceError('Invalid action reference passed in');\n      }\n      if (!fn.isFunction(handler)) {\n        throw new TypeError('bindAction expects a function');\n      }\n\n      // You can pass in the constant or the function itself\n      var key = symbol.id ? symbol.id : symbol;\n      this.actionListeners[key] = this.actionListeners[key] || [];\n      this.actionListeners[key].push(handler.bind(this));\n      this.boundListeners.push(key);\n    }\n\n    return bindAction;\n  }(),\n  bindActions: function () {\n    function bindActions(actions) {\n      var _this3 = this;\n\n      fn.eachObject(function (action, symbol) {\n        var matchFirstCharacter = /./;\n        var assumedEventHandler = action.replace(matchFirstCharacter, function (x) {\n          return 'on' + String(x[0].toUpperCase());\n        });\n\n        if (_this3[action] && _this3[assumedEventHandler]) {\n          // If you have both action and onAction\n          throw new ReferenceError('You have multiple action handlers bound to an action: ' + (String(action) + ' and ' + String(assumedEventHandler)));\n        }\n\n        var handler = _this3[action] || _this3[assumedEventHandler];\n        if (handler) {\n          _this3.bindAction(symbol, handler);\n        }\n      }, [actions]);\n    }\n\n    return bindActions;\n  }(),\n  bindListeners: function () {\n    function bindListeners(obj) {\n      var _this4 = this;\n\n      fn.eachObject(function (methodName, symbol) {\n        var listener = _this4[methodName];\n\n        if (!listener) {\n          throw new ReferenceError(String(methodName) + ' defined but does not exist in ' + String(_this4.displayName));\n        }\n\n        if (Array.isArray(symbol)) {\n          symbol.forEach(function (action) {\n            _this4.bindAction(action, listener);\n          });\n        } else {\n          _this4.bindAction(symbol, listener);\n        }\n      }, [obj]);\n    }\n\n    return bindListeners;\n  }()\n};\n\nexports['default'] = StoreMixin;\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createStoreConfig = createStoreConfig;\nexports.transformStore = transformStore;\nexports.createStoreFromObject = createStoreFromObject;\nexports.createStoreFromClass = createStoreFromClass;\n\nvar _AltUtils = require('../utils/AltUtils');\n\nvar utils = _interopRequireWildcard(_AltUtils);\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nvar _AltStore = require('./AltStore');\n\nvar _AltStore2 = _interopRequireDefault(_AltStore);\n\nvar _StoreMixin = require('./StoreMixin');\n\nvar _StoreMixin2 = _interopRequireDefault(_StoreMixin);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction doSetState(store, storeInstance, state) {\n  if (!state) {\n    return;\n  }\n\n  var config = storeInstance.StoreModel.config;\n\n\n  var nextState = fn.isFunction(state) ? state(storeInstance.state) : state;\n\n  storeInstance.state = config.setState.call(store, storeInstance.state, nextState);\n\n  if (!store.alt.dispatcher.isDispatching()) {\n    store.emitChange();\n  }\n}\n\nfunction createPrototype(proto, alt, key, extras) {\n  return fn.assign(proto, _StoreMixin2['default'], {\n    displayName: key,\n    alt: alt,\n    dispatcher: alt.dispatcher,\n    preventDefault: function () {\n      function preventDefault() {\n        this.getInstance().preventDefault = true;\n      }\n\n      return preventDefault;\n    }(),\n\n    boundListeners: [],\n    lifecycleEvents: {},\n    actionListeners: {},\n    publicMethods: {},\n    handlesOwnErrors: false\n  }, extras);\n}\n\nfunction createStoreConfig(globalConfig, StoreModel) {\n  StoreModel.config = fn.assign({\n    getState: function () {\n      function getState(state) {\n        if (Array.isArray(state)) {\n          return state.slice();\n        } else if (fn.isMutableObject(state)) {\n          return fn.assign({}, state);\n        }\n\n        return state;\n      }\n\n      return getState;\n    }(),\n    setState: function () {\n      function setState(currentState, nextState) {\n        if (fn.isMutableObject(nextState)) {\n          return fn.assign(currentState, nextState);\n        }\n        return nextState;\n      }\n\n      return setState;\n    }()\n  }, globalConfig, StoreModel.config);\n}\n\nfunction transformStore(transforms, StoreModel) {\n  return transforms.reduce(function (Store, transform) {\n    return transform(Store);\n  }, StoreModel);\n}\n\nfunction createStoreFromObject(alt, StoreModel, key) {\n  var storeInstance = void 0;\n\n  var StoreProto = createPrototype({}, alt, key, fn.assign({\n    getInstance: function () {\n      function getInstance() {\n        return storeInstance;\n      }\n\n      return getInstance;\n    }(),\n    setState: function () {\n      function setState(nextState) {\n        doSetState(this, storeInstance, nextState);\n      }\n\n      return setState;\n    }()\n  }, StoreModel));\n\n  // bind the store listeners\n  /* istanbul ignore else */\n  if (StoreProto.bindListeners) {\n    _StoreMixin2['default'].bindListeners.call(StoreProto, StoreProto.bindListeners);\n  }\n  /* istanbul ignore else */\n  if (StoreProto.observe) {\n    _StoreMixin2['default'].bindListeners.call(StoreProto, StoreProto.observe(alt));\n  }\n\n  // bind the lifecycle events\n  /* istanbul ignore else */\n  if (StoreProto.lifecycle) {\n    fn.eachObject(function (eventName, event) {\n      _StoreMixin2['default'].on.call(StoreProto, eventName, event);\n    }, [StoreProto.lifecycle]);\n  }\n\n  // create the instance and fn.assign the public methods to the instance\n  storeInstance = fn.assign(new _AltStore2['default'](alt, StoreProto, StoreProto.state !== undefined ? StoreProto.state : {}, StoreModel), StoreProto.publicMethods, {\n    displayName: key,\n    config: StoreModel.config\n  });\n\n  return storeInstance;\n}\n\nfunction createStoreFromClass(alt, StoreModel, key) {\n  var storeInstance = void 0;\n  var config = StoreModel.config;\n\n  // Creating a class here so we don't overload the provided store's\n  // prototype with the mixin behaviour and I'm extending from StoreModel\n  // so we can inherit any extensions from the provided store.\n\n  var Store = function (_StoreModel) {\n    _inherits(Store, _StoreModel);\n\n    function Store() {\n      _classCallCheck(this, Store);\n\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return _possibleConstructorReturn(this, _StoreModel.call.apply(_StoreModel, [this].concat(args)));\n    }\n\n    return Store;\n  }(StoreModel);\n\n  createPrototype(Store.prototype, alt, key, {\n    type: 'AltStore',\n    getInstance: function () {\n      function getInstance() {\n        return storeInstance;\n      }\n\n      return getInstance;\n    }(),\n    setState: function () {\n      function setState(nextState) {\n        doSetState(this, storeInstance, nextState);\n      }\n\n      return setState;\n    }()\n  });\n\n  for (var _len = arguments.length, argsForClass = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    argsForClass[_key - 3] = arguments[_key];\n  }\n\n  var store = new (Function.prototype.bind.apply(Store, [null].concat(argsForClass)))();\n\n  /* istanbul ignore next */\n  if (config.bindListeners) store.bindListeners(config.bindListeners);\n  /* istanbul ignore next */\n  if (config.datasource) store.registerAsync(config.datasource);\n\n  storeInstance = fn.assign(new _AltStore2['default'](alt, store, store.state !== undefined ? store.state : store, StoreModel), utils.getInternalMethods(StoreModel), config.publicMethods, { displayName: key });\n\n  return storeInstance;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.getInternalMethods = getInternalMethods;\nexports.getPrototypeChain = getPrototypeChain;\nexports.warn = warn;\nexports.uid = uid;\nexports.formatAsConstant = formatAsConstant;\nexports.dispatchIdentity = dispatchIdentity;\nexports.fsa = fsa;\nexports.dispatch = dispatch;\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\n/*eslint-disable*/\nvar builtIns = Object.getOwnPropertyNames(NoopClass);\nvar builtInProto = Object.getOwnPropertyNames(NoopClass.prototype);\n/*eslint-enable*/\n\nfunction getInternalMethods(Obj, isProto) {\n  var excluded = isProto ? builtInProto : builtIns;\n  var obj = isProto ? Obj.prototype : Obj;\n  return Object.getOwnPropertyNames(obj).reduce(function (value, m) {\n    if (excluded.indexOf(m) !== -1) {\n      return value;\n    }\n\n    value[m] = obj[m];\n    return value;\n  }, {});\n}\n\nfunction getPrototypeChain(Obj) {\n  var methods = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  return Obj === Function.prototype ? methods : getPrototypeChain(Object.getPrototypeOf(Obj), fn.assign(getInternalMethods(Obj, true), methods));\n}\n\nfunction warn(msg) {\n  /* istanbul ignore else */\n  /*eslint-disable*/\n  if (typeof console !== 'undefined') {\n    console.warn(new ReferenceError(msg));\n  }\n  /*eslint-enable*/\n}\n\nfunction uid(container, name) {\n  var count = 0;\n  var key = name;\n  while (Object.hasOwnProperty.call(container, key)) {\n    key = name + String(++count);\n  }\n  return key;\n}\n\nfunction formatAsConstant(name) {\n  return name.replace(/[a-z]([A-Z])/g, function (i) {\n    return String(i[0]) + '_' + String(i[1].toLowerCase());\n  }).toUpperCase();\n}\n\nfunction dispatchIdentity(x) {\n  if (x === undefined) return null;\n\n  for (var _len = arguments.length, a = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    a[_key - 1] = arguments[_key];\n  }\n\n  return a.length ? [x].concat(a) : x;\n}\n\nfunction fsa(id, type, payload, details) {\n  return {\n    type: type,\n    payload: payload,\n    meta: _extends({\n      dispatchId: id\n    }, details),\n\n    id: id,\n    action: type,\n    data: payload,\n    details: details\n  };\n}\n\nfunction dispatch(id, actionObj, payload, alt) {\n  var data = actionObj.dispatch(payload);\n  if (data === undefined) return null;\n\n  var type = actionObj.id;\n  var namespace = type;\n  var name = type;\n  var details = { id: type, namespace: namespace, name: name };\n\n  var dispatchLater = function dispatchLater(x) {\n    return alt.dispatch(type, x, details);\n  };\n\n  if (fn.isFunction(data)) return data(dispatchLater, alt);\n\n  // XXX standardize this\n  return alt.dispatcher.dispatch(fsa(id, type, data, details));\n}\n\n/* istanbul ignore next */\nfunction NoopClass() {}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setAppState = setAppState;\nexports.snapshot = snapshot;\nexports.saveInitialSnapshot = saveInitialSnapshot;\nexports.filterSnapshots = filterSnapshots;\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction setAppState(instance, data, onStore) {\n  var obj = instance.deserialize(data);\n  fn.eachObject(function (key, value) {\n    var store = instance.stores[key];\n    if (store) {\n      (function () {\n        var config = store.StoreModel.config;\n\n        var state = store.state;\n        if (config.onDeserialize) obj[key] = config.onDeserialize(value) || value;\n        if (fn.isMutableObject(state)) {\n          fn.eachObject(function (k) {\n            return delete state[k];\n          }, [state]);\n          fn.assign(state, obj[key]);\n        } else {\n          store.state = obj[key];\n        }\n        onStore(store, store.state);\n      })();\n    }\n  }, [obj]);\n}\n\nfunction snapshot(instance) {\n  var storeNames = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];\n\n  var stores = storeNames.length ? storeNames : Object.keys(instance.stores);\n  return stores.reduce(function (obj, storeHandle) {\n    var storeName = storeHandle.displayName || storeHandle;\n    var store = instance.stores[storeName];\n    var config = store.StoreModel.config;\n\n    store.lifecycle('snapshot');\n    var customSnapshot = config.onSerialize && config.onSerialize(store.state);\n    obj[storeName] = customSnapshot ? customSnapshot : store.getState();\n    return obj;\n  }, {});\n}\n\nfunction saveInitialSnapshot(instance, key) {\n  var state = instance.deserialize(instance.serialize(instance.stores[key].state));\n  instance._initSnapshot[key] = state;\n  instance._lastSnapshot[key] = state;\n}\n\nfunction filterSnapshots(instance, state, stores) {\n  return stores.reduce(function (obj, store) {\n    var storeName = store.displayName || store;\n    if (!state[storeName]) {\n      throw new ReferenceError(String(storeName) + ' is not a valid store');\n    }\n    obj[storeName] = state[storeName];\n    return obj;\n  }, {});\n}","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","/**\n * Copyright (c) 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\nmodule.exports.Dispatcher = require('./lib/Dispatcher');\n","/**\n * Copyright (c) 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Dispatcher\n * \n * @preventMunge\n */\n\n'use strict';\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar _prefix = 'ID_';\n\n/**\n * Dispatcher is used to broadcast payloads to registered callbacks. This is\n * different from generic pub-sub systems in two ways:\n *\n *   1) Callbacks are not subscribed to particular events. Every payload is\n *      dispatched to every registered callback.\n *   2) Callbacks can be deferred in whole or part until other callbacks have\n *      been executed.\n *\n * For example, consider this hypothetical flight destination form, which\n * selects a default city when a country is selected:\n *\n *   var flightDispatcher = new Dispatcher();\n *\n *   // Keeps track of which country is selected\n *   var CountryStore = {country: null};\n *\n *   // Keeps track of which city is selected\n *   var CityStore = {city: null};\n *\n *   // Keeps track of the base flight price of the selected city\n *   var FlightPriceStore = {price: null}\n *\n * When a user changes the selected city, we dispatch the payload:\n *\n *   flightDispatcher.dispatch({\n *     actionType: 'city-update',\n *     selectedCity: 'paris'\n *   });\n *\n * This payload is digested by `CityStore`:\n *\n *   flightDispatcher.register(function(payload) {\n *     if (payload.actionType === 'city-update') {\n *       CityStore.city = payload.selectedCity;\n *     }\n *   });\n *\n * When the user selects a country, we dispatch the payload:\n *\n *   flightDispatcher.dispatch({\n *     actionType: 'country-update',\n *     selectedCountry: 'australia'\n *   });\n *\n * This payload is digested by both stores:\n *\n *   CountryStore.dispatchToken = flightDispatcher.register(function(payload) {\n *     if (payload.actionType === 'country-update') {\n *       CountryStore.country = payload.selectedCountry;\n *     }\n *   });\n *\n * When the callback to update `CountryStore` is registered, we save a reference\n * to the returned token. Using this token with `waitFor()`, we can guarantee\n * that `CountryStore` is updated before the callback that updates `CityStore`\n * needs to query its data.\n *\n *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {\n *     if (payload.actionType === 'country-update') {\n *       // `CountryStore.country` may not be updated.\n *       flightDispatcher.waitFor([CountryStore.dispatchToken]);\n *       // `CountryStore.country` is now guaranteed to be updated.\n *\n *       // Select the default city for the new country\n *       CityStore.city = getDefaultCityForCountry(CountryStore.country);\n *     }\n *   });\n *\n * The usage of `waitFor()` can be chained, for example:\n *\n *   FlightPriceStore.dispatchToken =\n *     flightDispatcher.register(function(payload) {\n *       switch (payload.actionType) {\n *         case 'country-update':\n *         case 'city-update':\n *           flightDispatcher.waitFor([CityStore.dispatchToken]);\n *           FlightPriceStore.price =\n *             getFlightPriceStore(CountryStore.country, CityStore.city);\n *           break;\n *     }\n *   });\n *\n * The `country-update` payload will be guaranteed to invoke the stores'\n * registered callbacks in order: `CountryStore`, `CityStore`, then\n * `FlightPriceStore`.\n */\n\nvar Dispatcher = (function () {\n  function Dispatcher() {\n    _classCallCheck(this, Dispatcher);\n\n    this._callbacks = {};\n    this._isDispatching = false;\n    this._isHandled = {};\n    this._isPending = {};\n    this._lastID = 1;\n  }\n\n  /**\n   * Registers a callback to be invoked with every dispatched payload. Returns\n   * a token that can be used with `waitFor()`.\n   */\n\n  Dispatcher.prototype.register = function register(callback) {\n    var id = _prefix + this._lastID++;\n    this._callbacks[id] = callback;\n    return id;\n  };\n\n  /**\n   * Removes a callback based on its token.\n   */\n\n  Dispatcher.prototype.unregister = function unregister(id) {\n    !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.unregister(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;\n    delete this._callbacks[id];\n  };\n\n  /**\n   * Waits for the callbacks specified to be invoked before continuing execution\n   * of the current callback. This method should only be used by a callback in\n   * response to a dispatched payload.\n   */\n\n  Dispatcher.prototype.waitFor = function waitFor(ids) {\n    !this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Must be invoked while dispatching.') : invariant(false) : undefined;\n    for (var ii = 0; ii < ids.length; ii++) {\n      var id = ids[ii];\n      if (this._isPending[id]) {\n        !this._isHandled[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Circular dependency detected while ' + 'waiting for `%s`.', id) : invariant(false) : undefined;\n        continue;\n      }\n      !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;\n      this._invokeCallback(id);\n    }\n  };\n\n  /**\n   * Dispatches a payload to all registered callbacks.\n   */\n\n  Dispatcher.prototype.dispatch = function dispatch(payload) {\n    !!this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.') : invariant(false) : undefined;\n    this._startDispatching(payload);\n    try {\n      for (var id in this._callbacks) {\n        if (this._isPending[id]) {\n          continue;\n        }\n        this._invokeCallback(id);\n      }\n    } finally {\n      this._stopDispatching();\n    }\n  };\n\n  /**\n   * Is this Dispatcher currently dispatching.\n   */\n\n  Dispatcher.prototype.isDispatching = function isDispatching() {\n    return this._isDispatching;\n  };\n\n  /**\n   * Call the callback stored with the given id. Also do some internal\n   * bookkeeping.\n   *\n   * @internal\n   */\n\n  Dispatcher.prototype._invokeCallback = function _invokeCallback(id) {\n    this._isPending[id] = true;\n    this._callbacks[id](this._pendingPayload);\n    this._isHandled[id] = true;\n  };\n\n  /**\n   * Set up bookkeeping needed when dispatching.\n   *\n   * @internal\n   */\n\n  Dispatcher.prototype._startDispatching = function _startDispatching(payload) {\n    for (var id in this._callbacks) {\n      this._isPending[id] = false;\n      this._isHandled[id] = false;\n    }\n    this._pendingPayload = payload;\n    this._isDispatching = true;\n  };\n\n  /**\n   * Clear bookkeeping used for dispatching.\n   *\n   * @internal\n   */\n\n  Dispatcher.prototype._stopDispatching = function _stopDispatching() {\n    delete this._pendingPayload;\n    this._isDispatching = false;\n  };\n\n  return Dispatcher;\n})();\n\nmodule.exports = Dispatcher;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule invariant\n */\n\n\"use strict\";\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function (condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error('Invariant Violation: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;","/**\n * Indicates that navigation was caused by a call to history.push.\n */\n'use strict';\n\nexports.__esModule = true;\nvar PUSH = 'PUSH';\n\nexports.PUSH = PUSH;\n/**\n * Indicates that navigation was caused by a call to history.replace.\n */\nvar REPLACE = 'REPLACE';\n\nexports.REPLACE = REPLACE;\n/**\n * Indicates that navigation was caused by some other action such\n * as using a browser's back/forward buttons and/or manually manipulating\n * the URL in a browser's location bar. This is the default.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate\n * for more information.\n */\nvar POP = 'POP';\n\nexports.POP = POP;\nexports['default'] = {\n  PUSH: PUSH,\n  REPLACE: REPLACE,\n  POP: POP\n};","\"use strict\";\n\nexports.__esModule = true;\nexports.loopAsync = loopAsync;\n\nfunction loopAsync(turns, work, callback) {\n  var currentTurn = 0;\n  var isDone = false;\n\n  function done() {\n    isDone = true;\n    callback.apply(this, arguments);\n  }\n\n  function next() {\n    if (isDone) return;\n\n    if (currentTurn < turns) {\n      work.call(this, currentTurn++, next, done);\n    } else {\n      done.apply(this, arguments);\n    }\n  }\n\n  next();\n}","/*eslint-disable no-empty */\n'use strict';\n\nexports.__esModule = true;\nexports.saveState = saveState;\nexports.readState = readState;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar KeyPrefix = '@@History/';\nvar QuotaExceededError = 'QuotaExceededError';\nvar SecurityError = 'SecurityError';\n\nfunction createKey(key) {\n  return KeyPrefix + key;\n}\n\nfunction saveState(key, state) {\n  try {\n    window.sessionStorage.setItem(createKey(key), JSON.stringify(state));\n  } catch (error) {\n    if (error.name === SecurityError) {\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\n      // attempt to access window.sessionStorage.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available due to security settings') : undefined;\n\n      return;\n    }\n\n    if (error.name === QuotaExceededError && window.sessionStorage.length === 0) {\n      // Safari \"private mode\" throws QuotaExceededError.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : undefined;\n\n      return;\n    }\n\n    throw error;\n  }\n}\n\nfunction readState(key) {\n  var json = undefined;\n  try {\n    json = window.sessionStorage.getItem(createKey(key));\n  } catch (error) {\n    if (error.name === SecurityError) {\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\n      // attempt to access window.sessionStorage.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to read state; sessionStorage is not available due to security settings') : undefined;\n\n      return null;\n    }\n  }\n\n  if (json) {\n    try {\n      return JSON.parse(json);\n    } catch (error) {\n      // Ignore invalid JSON.\n    }\n  }\n\n  return null;\n}","'use strict';\n\nexports.__esModule = true;\nexports.addEventListener = addEventListener;\nexports.removeEventListener = removeEventListener;\nexports.getHashPath = getHashPath;\nexports.replaceHashPath = replaceHashPath;\nexports.getWindowPath = getWindowPath;\nexports.go = go;\nexports.getUserConfirmation = getUserConfirmation;\nexports.supportsHistory = supportsHistory;\nexports.supportsGoWithoutReloadUsingHash = supportsGoWithoutReloadUsingHash;\n\nfunction addEventListener(node, event, listener) {\n  if (node.addEventListener) {\n    node.addEventListener(event, listener, false);\n  } else {\n    node.attachEvent('on' + event, listener);\n  }\n}\n\nfunction removeEventListener(node, event, listener) {\n  if (node.removeEventListener) {\n    node.removeEventListener(event, listener, false);\n  } else {\n    node.detachEvent('on' + event, listener);\n  }\n}\n\nfunction getHashPath() {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  return window.location.href.split('#')[1] || '';\n}\n\nfunction replaceHashPath(path) {\n  window.location.replace(window.location.pathname + window.location.search + '#' + path);\n}\n\nfunction getWindowPath() {\n  return window.location.pathname + window.location.search + window.location.hash;\n}\n\nfunction go(n) {\n  if (n) window.history.go(n);\n}\n\nfunction getUserConfirmation(message, callback) {\n  callback(window.confirm(message));\n}\n\n/**\n * Returns true if the HTML5 history API is supported. Taken from Modernizr.\n *\n * https://github.com/Modernizr/Modernizr/blob/master/LICENSE\n * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js\n * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586\n */\n\nfunction supportsHistory() {\n  var ua = navigator.userAgent;\n  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {\n    return false;\n  }\n  // FIXME: Work around our browser history not working correctly on Chrome\n  // iOS: https://github.com/rackt/react-router/issues/2565\n  if (ua.indexOf('CriOS') !== -1) {\n    return false;\n  }\n  return window.history && 'pushState' in window.history;\n}\n\n/**\n * Returns false if using go(n) with hash history causes a full page reload.\n */\n\nfunction supportsGoWithoutReloadUsingHash() {\n  var ua = navigator.userAgent;\n  return ua.indexOf('Firefox') === -1;\n}","'use strict';\n\nexports.__esModule = true;\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\nexports.canUseDOM = canUseDOM;","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _Actions = require('./Actions');\n\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _DOMStateStorage = require('./DOMStateStorage');\n\nvar _createDOMHistory = require('./createDOMHistory');\n\nvar _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\n/**\n * Creates and returns a history object that uses HTML5's history API\n * (pushState, replaceState, and the popstate event) to manage history.\n * This is the recommended method of managing history in browsers because\n * it provides the cleanest URLs.\n *\n * Note: In browsers that do not support the HTML5 history API full\n * page reloads will be used to preserve URLs.\n */\nfunction createBrowserHistory() {\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Browser history needs a DOM') : _invariant2['default'](false) : undefined;\n\n  var forceRefresh = options.forceRefresh;\n\n  var isSupported = _DOMUtils.supportsHistory();\n  var useRefresh = !isSupported || forceRefresh;\n\n  function getCurrentLocation(historyState) {\n    historyState = historyState || window.history.state || {};\n\n    var path = _DOMUtils.getWindowPath();\n    var _historyState = historyState;\n    var key = _historyState.key;\n\n    var state = undefined;\n    if (key) {\n      state = _DOMStateStorage.readState(key);\n    } else {\n      state = null;\n      key = history.createKey();\n\n      if (isSupported) window.history.replaceState(_extends({}, historyState, { key: key }), null, path);\n    }\n\n    var location = _parsePath2['default'](path);\n\n    return history.createLocation(_extends({}, location, { state: state }), undefined, key);\n  }\n\n  function startPopStateListener(_ref) {\n    var transitionTo = _ref.transitionTo;\n\n    function popStateListener(event) {\n      if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.\n\n      transitionTo(getCurrentLocation(event.state));\n    }\n\n    _DOMUtils.addEventListener(window, 'popstate', popStateListener);\n\n    return function () {\n      _DOMUtils.removeEventListener(window, 'popstate', popStateListener);\n    };\n  }\n\n  function finishTransition(location) {\n    var basename = location.basename;\n    var pathname = location.pathname;\n    var search = location.search;\n    var hash = location.hash;\n    var state = location.state;\n    var action = location.action;\n    var key = location.key;\n\n    if (action === _Actions.POP) return; // Nothing to do.\n\n    _DOMStateStorage.saveState(key, state);\n\n    var path = (basename || '') + pathname + search + hash;\n    var historyState = {\n      key: key\n    };\n\n    if (action === _Actions.PUSH) {\n      if (useRefresh) {\n        window.location.href = path;\n        return false; // Prevent location update.\n      } else {\n          window.history.pushState(historyState, null, path);\n        }\n    } else {\n      // REPLACE\n      if (useRefresh) {\n        window.location.replace(path);\n        return false; // Prevent location update.\n      } else {\n          window.history.replaceState(historyState, null, path);\n        }\n    }\n  }\n\n  var history = _createDOMHistory2['default'](_extends({}, options, {\n    getCurrentLocation: getCurrentLocation,\n    finishTransition: finishTransition,\n    saveState: _DOMStateStorage.saveState\n  }));\n\n  var listenerCount = 0,\n      stopPopStateListener = undefined;\n\n  function listenBefore(listener) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    var unlisten = history.listenBefore(listener);\n\n    return function () {\n      unlisten();\n\n      if (--listenerCount === 0) stopPopStateListener();\n    };\n  }\n\n  function listen(listener) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    var unlisten = history.listen(listener);\n\n    return function () {\n      unlisten();\n\n      if (--listenerCount === 0) stopPopStateListener();\n    };\n  }\n\n  // deprecated\n  function registerTransitionHook(hook) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    history.registerTransitionHook(hook);\n  }\n\n  // deprecated\n  function unregisterTransitionHook(hook) {\n    history.unregisterTransitionHook(hook);\n\n    if (--listenerCount === 0) stopPopStateListener();\n  }\n\n  return _extends({}, history, {\n    listenBefore: listenBefore,\n    listen: listen,\n    registerTransitionHook: registerTransitionHook,\n    unregisterTransitionHook: unregisterTransitionHook\n  });\n}\n\nexports['default'] = createBrowserHistory;\nmodule.exports = exports['default'];","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _createHistory = require('./createHistory');\n\nvar _createHistory2 = _interopRequireDefault(_createHistory);\n\nfunction createDOMHistory(options) {\n  var history = _createHistory2['default'](_extends({\n    getUserConfirmation: _DOMUtils.getUserConfirmation\n  }, options, {\n    go: _DOMUtils.go\n  }));\n\n  function listen(listener) {\n    !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'DOM history needs a DOM') : _invariant2['default'](false) : undefined;\n\n    return history.listen(listener);\n  }\n\n  return _extends({}, history, {\n    listen: listen\n  });\n}\n\nexports['default'] = createDOMHistory;\nmodule.exports = exports['default'];","//import warning from 'warning'\n'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _deepEqual = require('deep-equal');\n\nvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\nvar _AsyncUtils = require('./AsyncUtils');\n\nvar _Actions = require('./Actions');\n\nvar _createLocation2 = require('./createLocation');\n\nvar _createLocation3 = _interopRequireDefault(_createLocation2);\n\nvar _runTransitionHook = require('./runTransitionHook');\n\nvar _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\nvar _deprecate = require('./deprecate');\n\nvar _deprecate2 = _interopRequireDefault(_deprecate);\n\nfunction createRandomKey(length) {\n  return Math.random().toString(36).substr(2, length);\n}\n\nfunction locationsAreEqual(a, b) {\n  return a.pathname === b.pathname && a.search === b.search &&\n  //a.action === b.action && // Different action !== location change.\n  a.key === b.key && _deepEqual2['default'](a.state, b.state);\n}\n\nvar DefaultKeyLength = 6;\n\nfunction createHistory() {\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n  var getCurrentLocation = options.getCurrentLocation;\n  var finishTransition = options.finishTransition;\n  var saveState = options.saveState;\n  var go = options.go;\n  var keyLength = options.keyLength;\n  var getUserConfirmation = options.getUserConfirmation;\n\n  if (typeof keyLength !== 'number') keyLength = DefaultKeyLength;\n\n  var transitionHooks = [];\n\n  function listenBefore(hook) {\n    transitionHooks.push(hook);\n\n    return function () {\n      transitionHooks = transitionHooks.filter(function (item) {\n        return item !== hook;\n      });\n    };\n  }\n\n  var allKeys = [];\n  var changeListeners = [];\n  var location = undefined;\n\n  function getCurrent() {\n    if (pendingLocation && pendingLocation.action === _Actions.POP) {\n      return allKeys.indexOf(pendingLocation.key);\n    } else if (location) {\n      return allKeys.indexOf(location.key);\n    } else {\n      return -1;\n    }\n  }\n\n  function updateLocation(newLocation) {\n    var current = getCurrent();\n\n    location = newLocation;\n\n    if (location.action === _Actions.PUSH) {\n      allKeys = [].concat(allKeys.slice(0, current + 1), [location.key]);\n    } else if (location.action === _Actions.REPLACE) {\n      allKeys[current] = location.key;\n    }\n\n    changeListeners.forEach(function (listener) {\n      listener(location);\n    });\n  }\n\n  function listen(listener) {\n    changeListeners.push(listener);\n\n    if (location) {\n      listener(location);\n    } else {\n      var _location = getCurrentLocation();\n      allKeys = [_location.key];\n      updateLocation(_location);\n    }\n\n    return function () {\n      changeListeners = changeListeners.filter(function (item) {\n        return item !== listener;\n      });\n    };\n  }\n\n  function confirmTransitionTo(location, callback) {\n    _AsyncUtils.loopAsync(transitionHooks.length, function (index, next, done) {\n      _runTransitionHook2['default'](transitionHooks[index], location, function (result) {\n        if (result != null) {\n          done(result);\n        } else {\n          next();\n        }\n      });\n    }, function (message) {\n      if (getUserConfirmation && typeof message === 'string') {\n        getUserConfirmation(message, function (ok) {\n          callback(ok !== false);\n        });\n      } else {\n        callback(message !== false);\n      }\n    });\n  }\n\n  var pendingLocation = undefined;\n\n  function transitionTo(nextLocation) {\n    if (location && locationsAreEqual(location, nextLocation)) return; // Nothing to do.\n\n    pendingLocation = nextLocation;\n\n    confirmTransitionTo(nextLocation, function (ok) {\n      if (pendingLocation !== nextLocation) return; // Transition was interrupted.\n\n      if (ok) {\n        // treat PUSH to current path like REPLACE to be consistent with browsers\n        if (nextLocation.action === _Actions.PUSH) {\n          var prevPath = createPath(location);\n          var nextPath = createPath(nextLocation);\n\n          if (nextPath === prevPath) nextLocation.action = _Actions.REPLACE;\n        }\n\n        if (finishTransition(nextLocation) !== false) updateLocation(nextLocation);\n      } else if (location && nextLocation.action === _Actions.POP) {\n        var prevIndex = allKeys.indexOf(location.key);\n        var nextIndex = allKeys.indexOf(nextLocation.key);\n\n        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL.\n      }\n    });\n  }\n\n  function push(location) {\n    transitionTo(createLocation(location, _Actions.PUSH, createKey()));\n  }\n\n  function replace(location) {\n    transitionTo(createLocation(location, _Actions.REPLACE, createKey()));\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  function createKey() {\n    return createRandomKey(keyLength);\n  }\n\n  function createPath(location) {\n    if (location == null || typeof location === 'string') return location;\n\n    var pathname = location.pathname;\n    var search = location.search;\n    var hash = location.hash;\n\n    var result = pathname;\n\n    if (search) result += search;\n\n    if (hash) result += hash;\n\n    return result;\n  }\n\n  function createHref(location) {\n    return createPath(location);\n  }\n\n  function createLocation(location, action) {\n    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];\n\n    if (typeof action === 'object') {\n      //warning(\n      //  false,\n      //  'The state (2nd) argument to history.createLocation is deprecated; use a ' +\n      //  'location descriptor instead'\n      //)\n\n      if (typeof location === 'string') location = _parsePath2['default'](location);\n\n      location = _extends({}, location, { state: action });\n\n      action = key;\n      key = arguments[3] || createKey();\n    }\n\n    return _createLocation3['default'](location, action, key);\n  }\n\n  // deprecated\n  function setState(state) {\n    if (location) {\n      updateLocationState(location, state);\n      updateLocation(location);\n    } else {\n      updateLocationState(getCurrentLocation(), state);\n    }\n  }\n\n  function updateLocationState(location, state) {\n    location.state = _extends({}, location.state, state);\n    saveState(location.key, location.state);\n  }\n\n  // deprecated\n  function registerTransitionHook(hook) {\n    if (transitionHooks.indexOf(hook) === -1) transitionHooks.push(hook);\n  }\n\n  // deprecated\n  function unregisterTransitionHook(hook) {\n    transitionHooks = transitionHooks.filter(function (item) {\n      return item !== hook;\n    });\n  }\n\n  // deprecated\n  function pushState(state, path) {\n    if (typeof path === 'string') path = _parsePath2['default'](path);\n\n    push(_extends({ state: state }, path));\n  }\n\n  // deprecated\n  function replaceState(state, path) {\n    if (typeof path === 'string') path = _parsePath2['default'](path);\n\n    replace(_extends({ state: state }, path));\n  }\n\n  return {\n    listenBefore: listenBefore,\n    listen: listen,\n    transitionTo: transitionTo,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    createKey: createKey,\n    createPath: createPath,\n    createHref: createHref,\n    createLocation: createLocation,\n\n    setState: _deprecate2['default'](setState, 'setState is deprecated; use location.key to save state instead'),\n    registerTransitionHook: _deprecate2['default'](registerTransitionHook, 'registerTransitionHook is deprecated; use listenBefore instead'),\n    unregisterTransitionHook: _deprecate2['default'](unregisterTransitionHook, 'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead'),\n    pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),\n    replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')\n  };\n}\n\nexports['default'] = createHistory;\nmodule.exports = exports['default'];","//import warning from 'warning'\n'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _Actions = require('./Actions');\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\nfunction createLocation() {\n  var location = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];\n  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];\n  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n  var _fourthArg = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];\n\n  if (typeof location === 'string') location = _parsePath2['default'](location);\n\n  if (typeof action === 'object') {\n    //warning(\n    //  false,\n    //  'The state (2nd) argument to createLocation is deprecated; use a ' +\n    //  'location descriptor instead'\n    //)\n\n    location = _extends({}, location, { state: action });\n\n    action = key || _Actions.POP;\n    key = _fourthArg;\n  }\n\n  var pathname = location.pathname || '/';\n  var search = location.search || '';\n  var hash = location.hash || '';\n  var state = location.state || null;\n\n  return {\n    pathname: pathname,\n    search: search,\n    hash: hash,\n    state: state,\n    action: action,\n    key: key\n  };\n}\n\nexports['default'] = createLocation;\nmodule.exports = exports['default'];","//import warning from 'warning'\n\n\"use strict\";\n\nexports.__esModule = true;\nfunction deprecate(fn) {\n  return fn;\n  //return function () {\n  //  warning(false, '[history] ' + message)\n  //  return fn.apply(this, arguments)\n  //}\n}\n\nexports[\"default\"] = deprecate;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nexports.__esModule = true;\nfunction extractPath(string) {\n  var match = string.match(/^https?:\\/\\/[^\\/]*/);\n\n  if (match == null) return string;\n\n  return string.substring(match[0].length);\n}\n\nexports[\"default\"] = extractPath;\nmodule.exports = exports[\"default\"];","'use strict';\n\nexports.__esModule = true;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _extractPath = require('./extractPath');\n\nvar _extractPath2 = _interopRequireDefault(_extractPath);\n\nfunction parsePath(path) {\n  var pathname = _extractPath2['default'](path);\n  var search = '';\n  var hash = '';\n\n  process.env.NODE_ENV !== 'production' ? _warning2['default'](path === pathname, 'A path must be pathname + search + hash only, not a fully qualified URL like \"%s\"', path) : undefined;\n\n  var hashIndex = pathname.indexOf('#');\n  if (hashIndex !== -1) {\n    hash = pathname.substring(hashIndex);\n    pathname = pathname.substring(0, hashIndex);\n  }\n\n  var searchIndex = pathname.indexOf('?');\n  if (searchIndex !== -1) {\n    search = pathname.substring(searchIndex);\n    pathname = pathname.substring(0, searchIndex);\n  }\n\n  if (pathname === '') pathname = '/';\n\n  return {\n    pathname: pathname,\n    search: search,\n    hash: hash\n  };\n}\n\nexports['default'] = parsePath;\nmodule.exports = exports['default'];","'use strict';\n\nexports.__esModule = true;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction runTransitionHook(hook, location, callback) {\n  var result = hook(location, callback);\n\n  if (hook.length < 2) {\n    // Assume the hook runs synchronously and automatically\n    // call the callback with the return value.\n    callback(result);\n  } else {\n    process.env.NODE_ENV !== 'production' ? _warning2['default'](result === undefined, 'You should not \"return\" in a transition hook with a callback argument; call the callback instead') : undefined;\n  }\n}\n\nexports['default'] = runTransitionHook;\nmodule.exports = exports['default'];","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","module.exports = isPromise;\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\"use strict\";\n\nfunction transmitter() {\n  var subscriptions = [];\n  var nowDispatching = false;\n  var toUnsubscribe = {};\n\n  var unsubscribe = function unsubscribe(onChange) {\n    var id = subscriptions.indexOf(onChange);\n    if (id < 0) return;\n    if (nowDispatching) {\n      toUnsubscribe[id] = onChange;\n      return;\n    }\n    subscriptions.splice(id, 1);\n  };\n\n  var subscribe = function subscribe(onChange) {\n    var id = subscriptions.push(onChange);\n    var dispose = function dispose() {\n      return unsubscribe(onChange);\n    };\n    return { dispose: dispose };\n  };\n\n  var publish = function publish() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    nowDispatching = true;\n    try {\n      subscriptions.forEach(function (subscription, id) {\n        return toUnsubscribe[id] || subscription.apply(undefined, args);\n      });\n    } finally {\n      nowDispatching = false;\n      Object.keys(toUnsubscribe).forEach(function (id) {\n        return unsubscribe(toUnsubscribe[id]);\n      });\n      toUnsubscribe = {};\n    }\n  };\n\n  return {\n    publish: publish,\n    subscribe: subscribe,\n    $subscriptions: subscriptions\n  };\n}\n\nmodule.exports = transmitter;","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n        '`warning(condition, format, ...args)` requires a warning ' +\n        'message argument'\n      );\n    }\n\n    if (format.length < 10 || (/^[s\\W]*$/).test(format)) {\n      throw new Error(\n        'The warning format should be able to uniquely identify this ' +\n        'warning. Please, use a more descriptive format than: ' + format\n      );\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' +\n        format.replace(/%s/g, function() {\n          return args[argIndex++];\n        });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch(x) {}\n    }\n  };\n}\n\nmodule.exports = warning;\n","import alt from '../alt'\n\nclass FooterActions {\n  constructor () {\n    this.generateActions(\n      'getFiveRecentMoviesSuccess'\n    )\n  }\n\n  getFiveRecentMovies () {\n    let request = {\n      method: 'get',\n      url: '/api/movies/five-recent'\n    }\n\n    $.ajax(request)\n      .done(data => this.getFiveRecentMoviesSuccess(data))\n\n    return true\n  }\n}\n\nexport default alt.createActions(FooterActions)\n","import alt from '../alt'\nimport TMDB from '../utilities/RequesterTMDB'\n\nclass HomeActions {\n  constructor () {\n    this.generateActions(\n      'getTopTenMoviesSuccess',\n      'getTopTenMoviesFail'\n    )\n  }\n\n  getTopTenMovies () {\n    let request = {\n      url: '/api/movies/top-ten',\n      method: 'get'\n    }\n\n    $.ajax(request)\n      .done(payload => {\n        let tmdbPromises = []\n        for (let movie of payload) {\n          tmdbPromises.push(TMDB.getMoviePoster(movie.name))\n        }\n        Promise.all(tmdbPromises).then((promises) => {\n          let movies = []\n          for (let i = 0; i < payload.length; i++) {\n            let movieData = {\n              _id: payload[i]._id,\n              name: payload[i].name,\n              description: payload[i].description,\n              genres: payload[i].genres,\n              moviePosterUrl: promises[i].posterUrl\n            }\n            movies.push(movieData)\n          }\n\n          this.getTopTenMoviesSuccess(movies)\n        })\n      })\n      .fail(err => this.getTopTenMoviesFail(err))\n\n    return true\n  }\n}\n\nexport default alt.createActions(HomeActions)\n","import alt from '../alt'\n\nclass MovieAddActions {\n  constructor () {\n    this.generateActions(\n      'handleNameChange',\n      'handleDescriptionChange',\n      'handleGenresChange',\n      'nameValidationFail',\n      'genresValidationFail',\n      'addMovieSuccess',\n      'addMovieFail'\n    )\n  }\n\n  addMovie (data) {\n    let request = {\n      url: '/api/movies/add',\n      method: 'post',\n      data: JSON.stringify(data),\n      contentType: 'application/json'\n    }\n\n    $.ajax(request)\n      .done(() => this.addMovieSuccess())\n      .fail((err) => this.addMovieFail(err))\n\n    return true\n  }\n}\n\nexport default alt.createActions(MovieAddActions)\n","import alt from '../alt'\n\nclass NavbarActions {\n  constructor () {\n    this.generateActions(\n      'updateAjaxAnimation'\n    )\n  }\n}\n\nexport default alt.createActions(NavbarActions)\n","import alt from '../alt'\n\nclass UserActions {\n  constructor () {\n    this.generateActions(\n      'loginUserSuccess',\n      'loginUserFail',\n      'logoutUserSuccess'\n    )\n  }\n\n  loginUser () {\n    let request = {\n      url: '/user/login',\n      method: 'post',\n      data: JSON.stringify({username: 'admin', password: 'admin'}),\n      contentType: 'application/json'\n    }\n\n    $.ajax(request)\n      .done(data => this.loginUserSuccess(data))\n      .fail(err => this.loginUserFail(err))\n\n    return true\n  }\n\n  logoutUser () {\n    let request = {\n      url: '/user/logout',\n      method: 'post'\n    }\n\n    $.ajax(request)\n      .done(() => this.logoutUserSuccess())\n\n    return true\n  }\n}\n\nexport default alt.createActions(UserActions)\n","import Alt from 'alt'\n\nexport default new Alt()\n","import React from 'react'\nimport Navbar from './Navbar'\nimport Footer from './Footer'\nimport UserStore from '../stores/UserStore'\nimport UserActions from '../actions/UserActions'\n\nexport default class App extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = UserStore.getState()\n\n    this.onChange = this.onChange.bind(this)\n  }\n\n  onChange (state) {\n    this.setState(state)\n  }\n\n  componentDidMount () {\n    UserStore.listen(this.onChange)\n    UserActions.loginUser()\n  }\n\n  componentWillUnmount () {\n    UserStore.listen(this.onChange)\n  }\n\n  render () {\n    return (\n      <div>\n        <Navbar />\n        {this.props.children}\n        <Footer />\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router'\nimport FooterActions from '../actions/FooterActions'\nimport FooterStore from '../stores/FooterStore'\n\nexport default class Footer extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = FooterStore.getState()\n\n    this.onChange = this.onChange.bind(this)\n  }\n\n  onChange (state) {\n    this.setState(state)\n  }\n\n  componentDidMount () {\n    FooterStore.listen(this.onChange)\n\n    FooterActions.getFiveRecentMovies()\n    this.interval = setInterval(() => FooterActions.getFiveRecentMovies(), 30000)\n  }\n\n  componentWillUnmount () {\n    FooterStore.unlisten(this.onChange)\n    clearInterval(this.interval)\n  }\n\n  render () {\n    let mostRecentMovies = this.state.mostRecentMovies.map(movie => {\n      return (\n        <li key={movie._id}>\n          <Link to={`/...`}>{movie.name}</Link>\n        </li>\n      )\n    })\n\n    return (\n      <footer>\n        <div className='container'>\n          <div className='row'>\n            <div className='col-sm-5'>\n              <h3 className='lead'>\n                <strong>Information</strong> and <strong> Copyright</strong>\n              </h3>\n              <p>\n                Powered by<strong> Express</strong>,<strong> MongoDB</strong> and <strong>React</strong>\n              </p>\n              <p>© 2017 SoftUni.</p>\n            </div>\n            <div className='col-sm-4 hidden-xs'>\n              <h3 className='lead'>\n                <strong>Newest</strong> 5 Movies\n              </h3>\n              <ul className='list-inline'>\n                {mostRecentMovies}\n              </ul>\n            </div>\n            <div className='col-sm-3'>\n              <h3 className='lead'>Author</h3>\n              <a href='https://github.com/kvladimirov'>\n                <strong>Konstantin Vladimirov</strong>\n              </a>\n            </div>\n          </div>\n        </div>\n      </footer>\n    )\n  }\n}\n","import React from 'react'\nimport MovieCard from './sub-components/MovieCard'\nimport HomeActions from '../actions/HomeActions'\nimport HomeStore from '../stores/HomeStore'\n\nexport default class Home extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = HomeStore.getState()\n\n    this.onChange = this.onChange.bind(this)\n  }\n\n  onChange (state) {\n    this.setState(state)\n  }\n\n  componentDidMount () {\n    HomeStore.listen(this.onChange)\n\n    HomeActions.getTopTenMovies()\n  }\n\n  componentWillUnmount () {\n    HomeStore.unlisten(this.onChange)\n  }\n\n  render () {\n    let movies = this.state.topTenMovies.map((movie, index) => {\n      return (\n        <MovieCard key={movie._id} movie={movie} index={index} />\n      )\n    })\n\n    return (\n      <div className='container'>\n        <h3 className='text-center'>Welcome to\n          <strong> Movie Database</strong>\n        </h3>\n        <div className='list-group'>\n          {movies}\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\nimport MovieAddActions from '../actions/MovieAddActions'\nimport MovieAddStore from '../stores/MovieAddStore'\n\nexport default class MovieAdd extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = MovieAddStore.getState()\n\n    this.onChange = this.onChange.bind(this)\n  }\n\n  onChange (state) {\n    this.setState(state)\n  }\n\n  componentDidMount () {\n    MovieAddStore.listen(this.onChange)\n  }\n\n  componentWillUnmount () {\n    MovieAddStore.unlisten(this.onChange)\n  }\n\n  handleSubmit (e) {\n    e.preventDefault()\n\n    let name = this.state.name.trim()\n    let genres = this.state.genres\n    if (!name) {\n      MovieAddActions.nameValidationFail()\n    }\n    if (genres.length === 0) {\n      MovieAddActions.genresValidationFail()\n    }\n\n    if (name) {\n      let data = {\n        name: this.state.name,\n        description: this.state.description,\n        genres: this.state.genres\n      }\n\n      MovieAddActions.addMovie(data)\n    }\n  }\n\n  render () {\n    return (\n      <div className='container'>\n        <div className='row flipInX animated'>\n          <div className='col-sm-8'>\n            <div className='panel panel-default'>\n              <div className='panel-heading'>Add Movie</div>\n              <div className='panel-body'>\n                <form onSubmit={this.handleSubmit.bind(this)}>\n                  <div className={'form-group ' + this.state.nameValidationState}>\n                    <label className='control-label'>Name</label>\n                    <input type='text' className='form-control' ref='nameTextField'\n                      value={this.state.name}\n                      onChange={MovieAddActions.handleNameChange} autoFocus />\n                    <span className='help-block'>{ this.state.helpBlock }</span>\n                  </div>\n                  <div className='form-group'>\n                    <label className='control-label'>Description</label>\n                    <textarea className='form-control'\n                      rows='5'\n                      value={this.state.description}\n                      onChange={MovieAddActions.handleDescriptionChange} />\n                  </div>\n                  <div className={'form-group ' + this.state.genresValidationState}>\n                    <div className='checkbox checkbox-inline'>\n                      <input type='checkbox' name='genres' id='action' value='Action'\n                        checked={this.state.genres.indexOf('Action') !== -1}\n                        onChange={MovieAddActions.handleGenresChange} />\n                      <label htmlFor='action'>Action</label>\n                    </div>\n                    <div className='checkbox checkbox-inline'>\n                      <input type='checkbox' name='genres' id='horror' value='Horror'\n                        checked={this.state.genres.indexOf('Horror') !== -1}\n                        onChange={MovieAddActions.handleGenresChange} />\n                      <label htmlFor='horror'>Horror</label>\n                    </div>\n                    <div className='checkbox checkbox-inline'>\n                      <input type='checkbox' name='genres' id='sci-fi' value='Sci-fi'\n                        checked={this.state.genres.indexOf('Sci-fi') !== -1}\n                        onChange={MovieAddActions.handleGenresChange} />\n                      <label htmlFor='sci-fi'>Sci-fi</label>\n                    </div>\n                    <div className='checkbox checkbox-inline'>\n                      <input type='checkbox' name='genres' id='fantasy' value='Fantasy'\n                        checked={this.state.genres.indexOf('Fantasy') !== -1}\n                        onChange={MovieAddActions.handleGenresChange} />\n                      <label htmlFor='fantasy'>Fantasy</label>\n                    </div>\n                    <div className='checkbox checkbox-inline'>\n                      <input type='checkbox' name='genres' id='romance' value='Romance'\n                        checked={this.state.genres.indexOf('Romance') !== -1}\n                        onChange={MovieAddActions.handleGenresChange} />\n                      <label htmlFor='romance'>Romance</label>\n                    </div>\n                    <div className='checkbox checkbox-inline'>\n                      <input type='checkbox' name='genres' id='thriller' value='Thriller'\n                        checked={this.state.genres.indexOf('Thriller') !== -1}\n                        onChange={MovieAddActions.handleGenresChange} />\n                      <label htmlFor='thriller'>Thriller</label>\n                    </div>\n                    <div className='checkbox checkbox-inline'>\n                      <input type='checkbox' name='genres' id='adventure' value='Adventure'\n                        checked={this.state.genres.indexOf('Adventure') !== -1}\n                        onChange={MovieAddActions.handleGenresChange} />\n                      <label htmlFor='adventure'>Adventure</label>\n                    </div>\n                  </div>\n                  <button type='submit' className='btn btn-primary'>Submit</button>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router'\nimport NavbarActions from '../actions/NavbarActions'\nimport NavbarStore from '../stores/NavbarStore'\nimport NavbarUserMenu from './sub-components/NavbarUserMenu'\n\nexport default class Navbar extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = NavbarStore.getState()\n\n    this.onChange = this.onChange.bind(this)\n  }\n\n  onChange (state) {\n    this.setState(state)\n  }\n\n  componentDidMount () {\n    NavbarStore.listen(this.onChange)\n\n    $(document).ajaxStart(() => NavbarActions.updateAjaxAnimation('fadeIn'))\n    $(document).ajaxComplete(() => NavbarActions.updateAjaxAnimation('fadeOut'))\n  }\n\n  componentWillUnmount () {\n    NavbarStore.unlisten(this.onChange)\n  }\n\n  render () {\n    let navbarUserMenu = <NavbarUserMenu userData={this.props.userData} />\n    return (\n      <nav className='navbar navbar-default navbar-static-top'>\n        <div className='navbar-header'>\n          <button type='button' className='navbar-toggle collapsed' data-toggle='collapse' data-target='#navbar'>\n            <span className='sr-only'>Toggle navigation</span>\n            <span className='icon-bar' />\n            <span className='icon-bar' />\n            <span className='icon-bar' />\n          </button>\n          <Link to='/' className='navbar-brand'>\n            <span\n              ref='triangles'\n              className={'triangles animated ' + this.state.ajaxAnimationClass}>\n              <div className='tri invert' />\n              <div className='tri invert' />\n              <div className='tri' />\n              <div className='tri invert' />\n              <div className='tri invert' />\n              <div className='tri' />\n              <div className='tri invert' />\n              <div className='tri' />\n              <div className='tri invert' />\n            </span>\n            MDB\n          </Link>\n        </div>\n        <div id='navbar' className='navbar-collapse collapse'>\n          <ul className='nav navbar-nav'>\n            <li>\n              <Link to='/'>Home</Link>\n            </li>\n            <li>\n              <Link to='/movie/add'>Add Movie</Link>\n            </li>\n          </ul>\n          {navbarUserMenu}\n        </div>\n      </nav>\n    )\n  }\n}\n","import React from 'react'\n\nimport UserStore from '../stores/UserStore'\nimport UserInfo from './sub-components/UserInfo'\nimport UserVotedMovies from './sub-components/UserRatedMovies'\nimport UserReviews from './sub-components/UserReviews'\n\nexport default class UserProfile extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = UserStore.getState()\n\n    this.onChange = this.onChange.bind(this)\n  }\n\n  onChange (state) {\n    this.setState(state)\n  }\n\n  componentDidMount () {\n    UserStore.listen(this.onChange)\n  }\n\n  componentWillUnmount () {\n    UserStore.unlisten(this.onChange)\n  }\n\n  render () {\n    let nodes = {}\n    nodes.roles = this.state.roles.map((role, index) => {\n      return (\n        <h4 key={index} className='lead'>\n          <strong>{role}</strong>\n        </h4>\n      )\n    })\n\n    return (\n      <div>\n        <UserInfo name={this.state.name}\n          roles={this.state.roles}\n          information={this.state.information} />\n        <UserVotedMovies votes={this.state.votes} />\n        <UserReviews reviews={this.props.reviews} />\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router'\nimport Helpers from '../../utilities/Helpers'\n\nexport default class MovieCard extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      showVotePanel: false,\n      showCommentsPanel: false\n    }\n  }\n\n  toggleCommentsPanel () {\n    this.setState(prevState => ({\n      showCommentsPanel: !prevState.showCommentsPanel,\n      showVotePanel: false\n    }))\n  }\n\n  toggleVotePanel () {\n    this.setState(prevState => ({\n      showVotePanel: !prevState.showVotePanel,\n      showCommentsPanel: false\n    }))\n  }\n\n  render () {\n    let nodes = Helpers.nodesMovieCard(\n      this.state,\n      this.props,\n      this.toggleCommentsPanel.bind(this),\n      this.toggleVotePanel.bind(this)\n    )\n\n    return (\n      <div className='animated fadeIn'>\n        <div className='media movie'>\n          <span className='position pull-left'>{this.props.index + 1}</span>\n          <div className='pull-left thumb-lg' >\n            {nodes.poster}\n          </div>\n          <div className='media-body'>\n            <h4 className='media-heading'>\n              <Link to={`/movie/${this.props.movie._id}/${this.props.movie.name}`}>\n                {this.props.movie.name}\n              </Link>\n            </h4>\n            <small>Genres: {nodes.genres}</small>\n            <br />\n            <p>{this.props.movie.description}</p>\n            <span className='votes'>Votes:\n            {/* <strong>{this.state.movieVotes}</strong> */}\n            </span>\n            {/* {nodes.rating} */}\n          </div>\n          {nodes.panelToggles}\n        </div>\n        {nodes.votePanel}\n        {nodes.commentsPanel}\n        <div id='clear' />\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\nexport default class MovieCommentsPanel extends React.Component {\n  render () {\n    return (\n      <div className='list-group'>\n        <h3 className='col-sm-3'>Comments:</h3>\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\nexport default class MovieVotePanel extends React.Component {\n  render () {\n    return (\n      <div className='col-sm-4 col-xs-offset-8 list-group-item animated fadeIn vote'>\n        <div className='media'>\n          <div className='media-body'>\n            Hello from MovieVotePanel\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router'\n\nimport UserActions from '../../actions/UserActions'\nimport UserStore from '../../stores/UserStore'\n\nexport default class NavbarUserMenu extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = UserStore.getState()\n\n    this.onChange = this.onChange.bind(this)\n  }\n\n  onChange (state) {\n    this.setState(state)\n  }\n\n  componentDidMount () {\n    UserStore.listen(this.onChange)\n  }\n\n  componentWillUnmount () {\n    UserStore.unlisten(this.onChange)\n  }\n\n  render () {\n    // let userData = this.state\n    let userMenu\n    if (!this.state.loggedInUserId) {\n      userMenu = (\n        <ul className='nav navbar-nav pull-right'>\n          <li>\n            <a href='#' onClick={UserActions.loginUser}>Login</a>\n          </li>\n          <li>\n            <Link to='/user/register'>Register</Link>\n          </li>\n        </ul>\n      )\n    } else {\n      userMenu = (\n        <ul className='nav navbar-nav pull-right'>\n          <li>\n            <Link to={`/user/profile/${this.state.loggedInUserId}`}>Profile</Link>\n          </li>\n          <li>\n            <a href='#' onClick={UserActions.logoutUser}>Logout</a>\n          </li>\n        </ul>\n      )\n    }\n\n    return (\n      <div>\n        {userMenu}\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\nexport default class UserInfo extends React.Component {\n  constructor (props) {\n    super(props)\n  }\n\n  render () {\n    let roles\n\n    if (this.props.roles) {\n      roles = this.props.roles.map((role, index) => {\n        return (\n          <h4 key={index} className='lead'>\n            <strong>{role}</strong>\n          </h4>\n        )\n      })\n    }\n\n    return (\n      <div className='container profile-container'>\n        <div className='profile-img'>\n          <img src='/public/images/user-default.png' />\n        </div>\n        <div className='profile-info clearfix'>\n          <h2><strong>{ this.props.name }</strong></h2>\n          <h4 className='lead'>Roles:</h4>\n          { roles }\n          <p>{ this.props.information }</p>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\nimport UserRatedMoviesPanel from './UserRatedMoviesPanel'\n\nexport default class UserRatedMovies extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      showRatedMoviesPanel: false\n    }\n  }\n\n  toggleRatedMovies () {\n    this.setState(prevState => ({\n      showRatedMoviesPanel: !prevState.showRatedMoviesPanel\n    }))\n  }\n\n  render () {\n    return (\n      <div className='container profile-container'>\n        <div className='profile-stats clearfix'>\n          <ul>\n            <li>\n              <span className='stats-number'>{this.props.votes ? this.props.votes.length : 0 }</span>Votes\n            </li>\n          </ul>\n        </div>\n        <div className='pull-right btn-group'>\n          <a className='btn btn-primary' onClick={this.toggleRatedMovies.bind(this)}>\n            { this.state.showRatedMoviesPanel ? 'Hide' : 'Rated Movies' }\n          </a>\n        </div>\n        { this.state.showRatedMoviesPanel ? <UserRatedMoviesPanel movies={this.props.votes} /> : null }\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\r\n\r\nexport default class UserRatedMoviesPanel extends Component {\r\n  render () {\r\n    return (\r\n      <div>Hello from  UserRatedMoviesPanel</div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\n\nimport UserReviewsPanel from './UserReviewsPanel'\n\nexport default class UserReviews extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      showReviewsPanel: false\n    }\n  }\n\n  toggleReviews () {\n    this.setState(prevState => ({\n      showReviewsPanel: !prevState.showReviewsPanel\n    }))\n  }\n\n  render () {\n    return (\n      <div className='container profile-container'>\n        <div className='profile-stats clearfix'>\n          <ul>\n            <li>\n              <span className='stats-number'>{this.props.reviews ? this.props.reviews.length : 0}</span>Reviews\n            </li>\n          </ul>\n        </div>\n        <div className='pull-right btn-group'>\n          <a className='btn btn-primary' onClick={this.toggleReviews.bind(this)}>\n            { this.state.showReviewsPanel ? 'Hide' : 'Reviews' }\n          </a>\n        </div>\n        { this.state.showReviewsPanel ? <UserReviewsPanel reviews={this.props.reviews} /> : null }\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\nexport default class UserReviewsPanel extends React.Component {\n  constructor (props) {\n    super(props)\n  }\n\n  render () {\n    return (\n      <div className='container'>\n        <div className='list-group'>\n          Hello from UserReviewsPanel\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport Router from 'react-router';\nimport ReactDOM from 'react-dom';\nimport createBrowserHistory from 'history/lib/createBrowserHistory';\n\nimport routes from './routes';\n\nlet history = createBrowserHistory();\n\nReactDOM.render(\n    <Router history={history}>{ routes }</Router>,\n    document.getElementById('app')\n);","import React from 'react';\nimport { Route } from 'react-router';\n\nimport App from './components/App';\nimport Home from './components/Home'\nimport MovieAdd from './components/MovieAdd'\nimport UserProfile from './components/UserProfile'\n\nexport default (\n    <Route component={ App } >\n        <Route path='/' component={Home} />\n        <Route path='/movie/add' component={MovieAdd} />\n        <Route path='user/profile/:userId' component={UserProfile} />\n    </Route> \n);","import alt from '../alt'\nimport FooterActions from '../actions/FooterActions'\n\nclass FooterStore {\n  constructor () {\n    this.bindActions(FooterActions)\n\n    this.mostRecentMovies = []\n  }\n\n  onGetFiveRecentMoviesSuccess (data) {\n    this.mostRecentMovies = data\n  }\n}\n\nexport default alt.createStore(FooterStore)","import alt from '../alt'\nimport HomeActions from '../actions/HomeActions'\n\nclass HomeStore {\n  constructor () {\n    this.bindActions(HomeActions)\n\n    this.topTenMovies = []\n  }\n\n  onGetTopTenMoviesSuccess (movies) {\n    this.topTenMovies = movies\n  }\n\n  onGetTopTenMoviesFail (err) {\n    console.log('Could not connect to DB', err)\n  }\n}\n\nexport default alt.createStore(HomeStore)\n","import alt from '../alt'\nimport MovieAddActions from '../actions/MovieAddActions'\nimport Helpers from '../utilities/Helpers'\n\nclass MovieAddStore {\n  constructor () {\n    this.bindActions(MovieAddActions)\n\n    this.name = ''\n    this.description = ''\n    this.genres = []\n    this.moviePosterUrl = ''\n    this.genresValidationState = ''\n    this.nameValidationState = ''\n    this.helpBlock = ''\n  }\n\n  onAddMovieSuccess () {\n    console.log('Added movie!')\n  }\n\n  onAddMovieFail (err) {\n    console.log('Failed to add movie', err)\n  }\n\n  onHandleNameChange (e) {\n    this.name = e.target.value\n    this.nameValidationState = ''\n    this.helpBlock = ''\n  }\n\n  onHandleDescriptionChange (e) {\n    this.description = e.target.value\n    this.genresValidationState = ''\n    this.helpBlock = ''\n  }\n\n  onHandleGenresChange (e) {\n    console.log(e)\n    let genreValue = e.target.value\n    if (this.genres.indexOf(genreValue) === -1) {\n      this.genres = Helpers.appendToArray(genreValue, this.genres)\n    } else {\n      this.genres = Helpers.removeFromArray(genreValue, this.genres)\n    }\n\n    this.genresValidationState = ''\n    this.helpBlock = ''\n  }\n\n  onNameValidationFail () {\n    this.nameValidationState = 'has-error'\n    this.helpBlock = 'Enter movie name'\n  }\n\n  onGenresValidationFail () {\n    this.genresValidationState = 'has-error'\n    this.helpBlock = 'Select at least one movie genre'\n  }\n}\n\nexport default alt.createStore(MovieAddStore)\n","import alt from '../alt'\nimport NavbarActions from '../actions/NavbarActions'\n\nclass NavbarStore {\n  constructor () {\n    this.bindActions(NavbarActions)\n\n    this.ajaxAnimationClass = ''\n  }\n\n  onUpdateAjaxAnimation (animationClass) {\n    this.ajaxAnimationClass = animationClass\n  }\n}\n\nexport default alt.createStore(NavbarStore)\n","import alt from '../alt'\nimport UserActions from '../actions/UserActions'\n\nclass UserStore {\n  constructor () {\n    this.bindActions(UserActions) // AppActions ?\n\n    this.loggedInUserId = ''\n    this.username = ''\n    this.roles = []\n  }\n\n  onLoginUserSuccess (user) {\n    this.loggedInUserId = user._id\n    this.username = user.username\n    this.roles = user.roles\n  }\n\n  onLoginUserFail () {\n    console.log('Failed login attempt')\n  }\n\n  onLogoutUserSuccess () {\n    this.loggedInUserId = ''\n    this.username = ''\n    this.roles = []\n  }\n}\n\nexport default alt.createStore(UserStore)\n","import React from 'react'\nimport {Link} from 'react-router'\n\nimport MovieVotePanel from '../components/sub-components/MovieVotePanel'\nimport MovieCommentsPanel from '../components/sub-components/MovieCommentsPanel'\n\nexport default class Helpers {\n  static appendToArray (value, array) {\n    array.push(value)\n\n    return array\n  }\n\n  static prependToArray (value, array) {\n    array.unshift(value)\n\n    return array\n  }\n\n  static removeFromArray (value, array) {\n    let index = array.indexOf(value)\n\n    if (index !== -1) {\n      array.splice(index, 1)\n    }\n\n    return array\n  }\n\n  static nodesMovieCard (state, props, toggleCommentsPanel, toggleVotePanel) {\n    let nodes = {}\n\n    if (state.showCommentsPanel) {\n      nodes.commentsPanel = <MovieCommentsPanel movieId={props.movie._id} />\n    }\n\n    if (state.showVotePanel) {\n      nodes.votePanel = <MovieVotePanel movieId={props.movie._id} />\n    }\n\n    nodes.panelToggles = (\n      <div className='pull-right btn-group'>\n        <a className='btn btn-primary'\n          onClick={toggleCommentsPanel}>{state.showCommentsPanel ? 'Hide' : 'Comments'}</a>\n        <a className='btn btn-primary'\n          onClick={toggleVotePanel}>{state.showVotePanel ? 'Hide' : 'Vote'}</a>\n        <Link to={`/movie/${props.movie._id}/review/add`} className='btn btn-warning'>Write review</Link>\n      </div>\n    )\n\n    nodes.genres = props.movie.genres.map(genre => {\n      return (\n        <strong key={props.movie._id + genre}>{genre}</strong>\n      )\n    })\n\n    if (props.movie.moviePosterUrl) {\n      nodes.poster = (\n        <img className='media-object' src={props.movie.moviePosterUrl} />\n      )\n    }\n\n    return nodes\n  }\n}\n","const API_KEY = '71aabd79c7082bcacabc96877ac7238b'\nconst SEARCH_BASE_URL = 'https://api.themoviedb.org/3/search/movie'\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500'\nconst UNVERIFIED_MOVIE_POSTER_URL = '/images/movie-unverified.png'\nconst MISSING_DATA_POSTER_URL = '/images/movie-missing-data.jpg'\n\nexport default class RequesterTMDB {\n  static getMoviePoster (movieName) {\n    return new Promise((resolve, reject) => {\n      let request = {\n        method: 'get',\n        url: `${SEARCH_BASE_URL}?api_key=${API_KEY}&query=${movieName}`\n      }\n\n      $.ajax(request)\n        .done(tmdbResponse => {\n          console.log('TMDB response', tmdbResponse)\n          if (tmdbResponse.total_results === 0) {\n            resolve({posterUrl: UNVERIFIED_MOVIE_POSTER_URL})\n            return\n          }\n\n          let posterPath = tmdbResponse.results[0].poster_path\n          if (posterPath === null) {\n            resolve({posterUrl: MISSING_DATA_POSTER_URL})\n            return\n          }\n          resolve({posterUrl: `${POSTER_BASE_URL}/${posterPath}`})\n        })\n        .fail(err => {\n          reject({\n            clientMessage: 'Request failed',\n            error: err\n          })\n        })\n    })\n  }\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}